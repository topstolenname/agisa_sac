name: Deploy MkDocs to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
      - '.github/workflows/pages.yml'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Diagnostics: see exactly what sources CI finds ---
      - name: Debug â€“ list figure sources
        run: |
          echo "[inputs] docs/figs/src:"
          if [ -d docs/figs/src ]; then
            find docs/figs/src -maxdepth 1 -type f -printf "%f\n" | sort || true
          else
            echo "docs/figs/src does not exist"
          fi

      # --- Mermaid render ---
      - name: Setup Node for mermaid-cli
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm i -g @mermaid-js/mermaid-cli

      - name: Render Mermaid to SVG (name-stable)
        run: |
          set -euo pipefail
          mkdir -p docs/figs/svg
          shopt -s nullglob
          count=0
          for f in docs/figs/src/figure*.mmd; do
            base="$(basename "$f")"           # e.g., figure3_network.mmd
            stem="${base%%.*}"                # figure3_network
            fig="${stem%%_*}"                 # figure3
            out="docs/figs/svg/${fig}.svg"    # force figure3.svg
            echo "Rendering $f -> $out"
            mmdc -p puppeteer-config.json -i "$f" -o "$out" -w 1200 -s 2
            count=$((count+1))
          done
          echo "Mermaid files rendered: $count"

      # --- Graphviz render ---
      - name: Install Graphviz
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Render Graphviz to SVG (name-stable)
        run: |
          set -euo pipefail
          mkdir -p docs/figs/svg
          shopt -s nullglob
          count=0
          for f in docs/figs/src/figure*.dot; do
            base="$(basename "$f")"
            stem="${base%%.*}"
            fig="${stem%%_*}"
            out="docs/figs/svg/${fig}.svg"
            echo "Rendering $f -> $out"
            dot -Tsvg "$f" -o "$out"
            count=$((count+1))
          done
          echo "Graphviz files rendered: $count"

      # --- Optional Python figures (write to exact filenames) ---
      - name: Python figure scripts (optional)
        run: |
          python - <<'PY'
          import os, subprocess
          os.makedirs('docs/figs/svg', exist_ok=True)
          # Example: figure 1 generator -> docs/figs/svg/figure1.svg
          p = 'docs/figs/src/figure1_persistence.py'
          if os.path.exists(p):
              subprocess.check_call(['python', p, 'docs/figs/svg/figure1.svg'])
          PY

      # --- Verify outputs before building the site ---
      - name: Verify rendered outputs
        run: |
          echo "[outputs] docs/figs/svg:"
          ls -l docs/figs/svg || true
          missing=0
          for n in 1 2 3 4 5 6 7; do
            if [ ! -f "docs/figs/svg/figure${n}.svg" ]; then
              echo "MISSING: docs/figs/svg/figure${n}.svg"
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "One or more expected figures are missing; failing the build."
            exit 1
          fi

      # --- Build & Deploy ---
      - name: Build site
        run: mkdocs build --clean --strict

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site