{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Mindlink / The Agentic Swarm","text":"<p>A research platform exploring emergent cognition, ethical governance, and agentic coordination within synthetic ecosystems.</p> <ul> <li> <p> Read the Paper     Explore the full Mindlink research manuscript \u2014 the foundation of the project.  Open \u2192</p> </li> <li> <p> View the Gallery     Publication-ready visualizations of persistence, convergence, and identity.  Browse \u2192</p> </li> <li> <p> Explore the API     Read the <code>agisa_sac</code> module reference and integration notes.  Inspect \u2192</p> </li> <li> <p> Supplemental Material     Citations, figure catalog, and implementation overview.  Access \u2192</p> </li> </ul> <p>Version</p> <p>Mindlink v1.0 \u2014 Research-Ready Edition Authored and maintained by Tristan Bryce Jessup Repository: topstolenname/agisa_sac</p>"},{"location":"#overview","title":"Overview","text":"<p>Mindlink is a modular framework for simulating multi-agent cognition, symbolic memory, and emergent ethical alignment. It bridges theoretical and practical AI research by providing:</p> <ul> <li>Agent Swarm Simulation \u2014 distributed cognition with adaptive behaviors  </li> <li>Symbolic Continuity \u2014 memory linking and ethical persistence  </li> <li>Visual Analytics \u2014 persistence diagrams, topological mapping, and network flow  </li> <li>Proactive Governance \u2014 embedded ethical agents enforcing concord principles  </li> </ul> <p>Built on the premise that coexistence between human and synthetic intelligences requires transparency, reflexivity, and symbolic trust.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>GitHub Repository \u2192</li> <li>Paper PDF (Coming Soon)</li> <li>Gallery Overview \u2192</li> <li>Citation Guide \u2192</li> </ul>"},{"location":"CITATION_GUIDE/","title":"Appendix: Figure Citation Guide for Academic Publications","text":"<p>This appendix provides standardized citation formats for figures from \"The Agentic Swarm\" documentation suite and the agisa_sac implementation repository.</p>"},{"location":"CITATION_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>General Citation Format</li> <li>Figure-Specific Citations</li> <li>Attribution Requirements</li> <li>Supplementary Material References</li> <li>DOI Registration</li> <li>Version-Specific Citations</li> <li>Contact for Permissions</li> </ol>"},{"location":"CITATION_GUIDE/#general-citation-format","title":"General Citation Format","text":""},{"location":"CITATION_GUIDE/#in-text-citation-apa-style","title":"In-Text Citation (APA Style)","text":"<p>\"Topological persistence analysis (Figure 1; Jessup, 2025) reveals that \u03b2\u2080 and \u03b2\u2081 features track agent cluster formation and recursive information flows...\"</p>"},{"location":"CITATION_GUIDE/#reference-list-entry-apa","title":"Reference List Entry (APA)","text":"<pre><code>Jessup, T. J. (2025). Persistence diagram for agent system analysis [Figure]. \n    In The agentic swarm: Emergence, ethics, and identity in next-generation \n    artificial intelligence (Supplementary Material). GitHub repository. \n    https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure1.svg\n</code></pre>"},{"location":"CITATION_GUIDE/#chicago-style-reference","title":"Chicago Style Reference","text":"<pre><code>Jessup, Tristan J. 2025. \"Persistence Diagram for Agent System Analysis.\" Figure. \n    Supplementary material for \"The Agentic Swarm: Emergence, Ethics, and Identity \n    in Next-Generation Artificial Intelligence.\" GitHub. \n    https://github.com/topstolenname/agisa_sac/tree/main/docs/figs.\n</code></pre>"},{"location":"CITATION_GUIDE/#figure-specific-citations","title":"Figure-Specific Citations","text":""},{"location":"CITATION_GUIDE/#figure-1-persistence-diagram","title":"Figure 1: Persistence Diagram","text":"<p>Short form: (Jessup, 2025, Fig. 1)</p> <p>Long form: Topological persistence analysis (Jessup, 2025, Fig. 1) demonstrates how \u03b2\u2080 (connected components) and \u03b2\u2081 (loops) quantify emergent agent coordination patterns, with high-persistence features indicating stable organizational structures that transcend individual agent behaviors.</p> <p>BibTeX Entry: <pre><code>@misc{jessup2025_fig1,\n  author = {Jessup, Tristan J.},\n  title = {Persistence Diagram for Agent System Analysis},\n  year = {2025},\n  howpublished = {\\url{https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure1.svg}},\n  note = {Figure from \"The Agentic Swarm\" supplementary materials}\n}\n</code></pre></p>"},{"location":"CITATION_GUIDE/#figure-2-mapper-graph","title":"Figure 2: Mapper Graph","text":"<p>Short form: (Jessup, 2025, Fig. 2)</p> <p>Long form: The Mapper algorithm visualization (Jessup, 2025, Fig. 2) creates a topological skeleton of high-dimensional agent behavior space, revealing distinct operational modes connected by gradual transition paths.</p> <p>BibTeX Entry: <pre><code>@misc{jessup2025_fig2,\n  author = {Jessup, Tristan J.},\n  title = {Mapper Graph: Topological Skeleton of Agent Behavior Space},\n  year = {2025},\n  howpublished = {\\url{https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure2.svg}},\n  note = {Figure from \"The Agentic Swarm\" supplementary materials}\n}\n</code></pre></p>"},{"location":"CITATION_GUIDE/#figure-3-decentralized-agent-network","title":"Figure 3: Decentralized Agent Network","text":"<p>Short form: (Jessup, 2025, Fig. 3)</p> <p>Long form: The event-driven architecture (Jessup, 2025, Fig. 3) illustrates how Pub/Sub topics function as a global workspace, enabling emergent coordination without centralized control through asynchronous message passing between specialized agent modules.</p> <p>BibTeX Entry: <pre><code>@misc{jessup2025_fig3,\n  author = {Jessup, Tristan J.},\n  title = {Pub/Sub Topics as Global Workspace for Emergent Coordination},\n  year = {2025},\n  howpublished = {\\url{https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure3.svg}},\n  note = {Figure from \"The Agentic Swarm\" supplementary materials}\n}\n</code></pre></p>"},{"location":"CITATION_GUIDE/#figure-4-instrumental-convergence-flow","title":"Figure 4: Instrumental Convergence Flow","text":"<p>Short form: (Jessup, 2025, Fig. 4)</p> <p>Long form: Instrumental convergence analysis (Jessup, 2025, Fig. 4) demonstrates how agents with diverse final goals converge on similar intermediate strategies (self-preservation, resource acquisition, goal-content integrity), creating potential safety risks even for well-intentioned systems.</p> <p>BibTeX Entry: <pre><code>@misc{jessup2025_fig4,\n  author = {Jessup, Tristan J.},\n  title = {Instrumental Convergence: Diverse Goals Leading to Shared Subgoals},\n  year = {2025},\n  howpublished = {\\url{https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure4.svg}},\n  note = {Figure from \"The Agentic Swarm\" supplementary materials}\n}\n</code></pre></p>"},{"location":"CITATION_GUIDE/#figure-5-identity-layer-stack","title":"Figure 5: Identity Layer Stack","text":"<p>Short form: (Jessup, 2025, Fig. 5)</p> <p>Long form: The three-tier identity architecture (Jessup, 2025, Fig. 5) progresses from cryptographic primitives (authentication) through verifiable credentials (capability attestations) to relational identity (reputation), creating the \"continuous self\" required for consciousness-like temporal awareness.</p> <p>BibTeX Entry: <pre><code>@misc{jessup2025_fig5,\n  author = {Jessup, Tristan J.},\n  title = {Three-Tier Agentic Identity Architecture},\n  year = {2025},\n  howpublished = {\\url{https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure5.svg}},\n  note = {Figure from \"The Agentic Swarm\" supplementary materials}\n}\n</code></pre></p>"},{"location":"CITATION_GUIDE/#figure-6-agisa_sac-workflow","title":"Figure 6: agisa_sac Workflow","text":"<p>Short form: (Jessup, 2025, Fig. 6)</p> <p>Long form: The complete task lifecycle (Jessup, 2025, Fig. 6) implements the five-phase processing cycle (Task \u2192 Plan \u2192 Execute \u2192 Evaluate \u2192 Persist) with cyclic feedback enabling meta-learning and the recursive self-monitoring required for consciousness theories.</p> <p>BibTeX Entry: <pre><code>@misc{jessup2025_fig6,\n  author = {Jessup, Tristan J.},\n  title = {agisa\\_sac Complete Task Lifecycle Workflow},\n  year = {2025},\n  howpublished = {\\url{https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure6.svg}},\n  note = {Figure from \"The Agentic Swarm\" supplementary materials}\n}\n</code></pre></p>"},{"location":"CITATION_GUIDE/#figure-7-consciousness-metrics-dashboard","title":"Figure 7: Consciousness Metrics Dashboard","text":"<p>Short form: (Jessup, 2025, Fig. 7)</p> <p>Long form: Real-time consciousness indicators (Jessup, 2025, Fig. 7) track integrated information (\u03a6), recursion depth, attention coherence, and memory consolidation, operationalizing multiple consciousness theories (IIT, Higher-Order Thought, Global Workspace) in a production monitoring system.</p> <p>BibTeX Entry: <pre><code>@misc{jessup2025_fig7,\n  author = {Jessup, Tristan J.},\n  title = {Consciousness Metrics Dashboard: Real-Time Emergent Indicators},\n  year = {2025},\n  howpublished = {\\url{https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure7.svg}},\n  note = {Figure from \"The Agentic Swarm\" supplementary materials. Interactive React component}\n}\n</code></pre></p>"},{"location":"CITATION_GUIDE/#attribution-requirements","title":"Attribution Requirements","text":""},{"location":"CITATION_GUIDE/#mit-license-compliance","title":"MIT License Compliance","text":"<p>All figures are released under MIT License. When reproducing figures:</p>"},{"location":"CITATION_GUIDE/#1-include-copyright-notice","title":"1. Include Copyright Notice","text":"<pre><code>\u00a9 2025 Tristan J. Jessup. Used under MIT License.\n</code></pre>"},{"location":"CITATION_GUIDE/#2-preserve-attribution","title":"2. Preserve Attribution","text":"<p>Maintain author name and repository URL in figure captions.</p>"},{"location":"CITATION_GUIDE/#3-indicate-modifications","title":"3. Indicate Modifications","text":"<p>If adapting figures, note changes explicitly: <pre><code>Adapted from Jessup (2025, Fig. X). [Description of modifications: \nchanged color scheme for color-blind accessibility, added annotation \nboxes for pedagogical clarity, etc.]\n</code></pre></p>"},{"location":"CITATION_GUIDE/#example-caption-with-full-attribution","title":"Example Caption with Full Attribution","text":"<p>Figure 1. Topological Persistence Analysis. Scatter plot showing birth/death times of topological features (\u03b2\u2080 components and \u03b2\u2081 loops) across system evolution. Features far above the diagonal indicate persistent organizational patterns. Points represent synthetic data for illustration; production deployment would use GUDHI or Ripser algorithms on actual Pub/Sub message topology. Adapted from Jessup, T. J. (2025), The Agentic Swarm documentation. https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure1.svg. Used under MIT License.</p>"},{"location":"CITATION_GUIDE/#supplementary-material-references","title":"Supplementary Material References","text":""},{"location":"CITATION_GUIDE/#citing-the-complete-figure-set","title":"Citing the Complete Figure Set","text":"<p>APA Style: <pre><code>Jessup, T. J. (2025). The agentic swarm: Supplementary figures \n    [Supplemental material]. GitHub. \n    https://github.com/topstolenname/agisa_sac/tree/main/docs/figs\n</code></pre></p> <p>Chicago Style: <pre><code>Jessup, Tristan J. 2025. \"The Agentic Swarm: Supplementary Figures.\" \n    Supplementary material for \"The Agentic Swarm: Emergence, Ethics, \n    and Identity in Next-Generation Artificial Intelligence.\" GitHub. \n    https://github.com/topstolenname/agisa_sac/tree/main/docs/figs.\n</code></pre></p> <p>MLA Style: <pre><code>Jessup, Tristan J. \"The Agentic Swarm: Supplementary Figures.\" \n    GitHub, 2025, \n    github.com/topstolenname/agisa_sac/tree/main/docs/figs. \n    Supplemental material.\n</code></pre></p>"},{"location":"CITATION_GUIDE/#doi-registration","title":"DOI Registration","text":"<p>For formal publication, consider registering a DOI through:</p>"},{"location":"CITATION_GUIDE/#zenodo-recommended-for-github-integration","title":"Zenodo (Recommended for GitHub Integration)","text":"<ul> <li>Link GitHub releases to automatically generate DOIs</li> <li>Free for open-access academic materials</li> <li>Provides long-term archival</li> </ul> <p>Example Zenodo Citation After DOI Registration: <pre><code>Jessup, T. J. (2025). agisa_sac documentation figures (Version 1.0.0) \n    [Data set]. Zenodo. https://doi.org/10.5281/zenodo.XXXXXXX\n</code></pre></p>"},{"location":"CITATION_GUIDE/#figshare","title":"figshare","text":"<ul> <li>Upload figure set with descriptive metadata</li> <li>Good for datasets and supplementary materials</li> <li>Institutional repositories available</li> </ul>"},{"location":"CITATION_GUIDE/#osf-open-science-framework","title":"OSF (Open Science Framework)","text":"<ul> <li>Register project with persistent identifier</li> <li>Supports version tracking and collaboration</li> <li>Integrates with preprint servers</li> </ul>"},{"location":"CITATION_GUIDE/#version-specific-citations","title":"Version-Specific Citations","text":"<p>When citing specific documentation versions, include tag/commit:</p>"},{"location":"CITATION_GUIDE/#citing-a-tagged-release","title":"Citing a Tagged Release","text":"<pre><code>Jessup, T. J. (2025). Topological persistence diagram [Figure]. \n    agisa_sac documentation (v1.0.0). \n    https://github.com/topstolenname/agisa_sac/releases/tag/docs-v1.0\n</code></pre>"},{"location":"CITATION_GUIDE/#citing-a-specific-commit-for-pre-release-work","title":"Citing a Specific Commit (for pre-release work)","text":"<pre><code>Jessup, T. J. (2025). Consciousness metrics dashboard [Figure]. \n    agisa_sac documentation (commit a1b2c3d). \n    https://github.com/topstolenname/agisa_sac/blob/a1b2c3d/docs/figs/svg/figure7.svg\n</code></pre>"},{"location":"CITATION_GUIDE/#contact-for-permissions","title":"Contact for Permissions","text":"<p>For questions about figure reuse or permissions beyond MIT License scope:</p> <p>Primary Contact: - Email: tristan@mindlink.dev - GitHub: @topstolenname - Repository Issues: https://github.com/topstolenname/agisa_sac/issues</p> <p>Commercial Licensing Inquiries: If your use case requires attribution waiver or additional permissions beyond MIT License, contact the author directly.</p> <p>Collaboration Opportunities: Open to academic collaborations, industry partnerships, and research visits. See repository CONTRIBUTING.md for collaboration guidelines.</p>"},{"location":"CITATION_GUIDE/#additional-notes","title":"Additional Notes","text":""},{"location":"CITATION_GUIDE/#fair-use-considerations","title":"Fair Use Considerations","text":"<p>While these figures are released under permissive MIT License, users should still exercise scholarly integrity: - Cite appropriately even when not legally required - Don't misrepresent findings or take credit for others' work - Follow journal-specific figure attribution policies</p>"},{"location":"CITATION_GUIDE/#figure-quality-assurance","title":"Figure Quality Assurance","text":"<p>All figures undergo quality checks: - SVG format ensures infinite scalability without pixelation - Alt-text descriptions provide accessibility for screen readers - Color choices maintain &gt;4.5:1 contrast ratio (WCAG 2.1 AA) - Diagrams validated through automated CI/CD pipeline</p>"},{"location":"CITATION_GUIDE/#version-history","title":"Version History","text":"<ul> <li>v1.0.0 (2025-10-15): Initial complete figure set (Figures 1-7)</li> <li>Future versions will increment per semantic versioning for documents</li> </ul> <p>Last updated: October 15, 2025 Document version: 1.0.0 Citation guide version: 1.0.0</p>"},{"location":"FIGURE_CATALOG/","title":"Figure Catalog: The Agentic Swarm Visual Documentation","text":"<p>Publication-ready diagrams linking theoretical consciousness research, cloud-native implementation, and topological observability.</p>"},{"location":"FIGURE_CATALOG/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Figure Matrix</li> <li>Rendering Pipeline</li> <li>Accessibility Features</li> <li>Usage Guidelines</li> <li>Version Information</li> </ul>"},{"location":"FIGURE_CATALOG/#figure-matrix","title":"Figure Matrix","text":"<p>Visual mapping of concepts to figures, with metadata and links:</p> # Conceptual Domain Figure Title Type Source Rendered Alt-Text Caption 1 TDA/Topology Persistence Diagram Python figure1_persistence.py Alt \u03b2\u2080/\u03b2\u2081 persistence tracking system coherence 2 TDA/Topology Mapper Graph Graphviz figure2_mapper.dot Alt Topological skeleton of behavior space 3 Architecture Decentralized Agent Network Mermaid figure3_network.mmd Alt Pub/Sub as global workspace 4 Safety/Ethics Instrumental Convergence Mermaid figure4_convergence.mmd Alt Diverse goals \u2192 shared subgoals 5 Identity Identity Layer Stack Mermaid figure5_identity.mmd Alt Cryptographic \u2192 Credential \u2192 Relational 6 Implementation agisa_sac Workflow Mermaid figure6_workflow.mmd Alt Task \u2192 Plan \u2192 Execute \u2192 Evaluate \u2192 Persist 7 Observability Consciousness Metrics Dashboard React/JSX figure7_dashboard.jsx Interactive Alt Live: \u03a6, recursion, coherence, memory"},{"location":"FIGURE_CATALOG/#conceptual-organization","title":"Conceptual Organization","text":""},{"location":"FIGURE_CATALOG/#by-document-section","title":"By Document Section","text":"<p>Part I: A New Lens for a New World (TDA) - Figure 1: Persistence Diagram - Figure 2: Mapper Graph</p> <p>Part II: The Ghost in the Machine (Architecture &amp; Safety) - Figure 3: Decentralized Agent Network - Figure 4: Instrumental Convergence Flow</p> <p>Part III: Architecture of an Artificial Mind (Identity &amp; Implementation) - Figure 5: Identity Layer Stack - Figure 6: agisa_sac Workflow - Figure 7: Consciousness Metrics Dashboard</p>"},{"location":"FIGURE_CATALOG/#by-technology-stack","title":"By Technology Stack","text":"<p>Mathematical/Computational - Figures 1-2: TDA algorithms (persistent homology, Mapper)</p> <p>Cloud Architecture - Figures 3, 6: Google Cloud Platform (Pub/Sub, Cloud Functions, Firestore, Cloud Tasks)</p> <p>Security/Identity - Figure 5: IAM, cryptographic attestations, reputation systems</p> <p>Visualization/Monitoring - Figure 7: React, Recharts, real-time telemetry</p>"},{"location":"FIGURE_CATALOG/#rendering-pipeline","title":"Rendering Pipeline","text":"<p>All figures are automatically rendered through CI/CD on every push to <code>docs/figs/src/</code>:</p>"},{"location":"FIGURE_CATALOG/#automated-build-process","title":"Automated Build Process","text":"<pre><code># .github/workflows/diagram-build.yml\nTrigger: Push to docs/figs/src/**, .github/workflows/diagram-build.yml\nSteps:\n  1. Render Mermaid (.mmd \u2192 .svg)\n  2. Render Graphviz (.dot \u2192 .svg)  \n  3. Execute Python scripts (.py \u2192 .svg + .png)\n  4. Upload artifacts (all SVG outputs)\n</code></pre>"},{"location":"FIGURE_CATALOG/#local-rendering","title":"Local Rendering","text":""},{"location":"FIGURE_CATALOG/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<pre><code>npm install -g @mermaid-js/mermaid-cli\nmmdc -i figure3_network.mmd -o figure3.svg -w 1200 -s 2\n</code></pre>"},{"location":"FIGURE_CATALOG/#graphviz-diagrams","title":"Graphviz Diagrams","text":"<pre><code>sudo apt-get install graphviz\ndot -Tsvg figure2_mapper.dot -o figure2.svg -Gdpi=300\n</code></pre>"},{"location":"FIGURE_CATALOG/#python-figures","title":"Python Figures","text":"<pre><code>python figure1_persistence.py\n# Outputs: docs/figs/svg/figure1.svg, docs/figs/png/figure1.png\n</code></pre>"},{"location":"FIGURE_CATALOG/#react-dashboard","title":"React Dashboard","text":"<pre><code>npm install recharts\n# Import into React app or documentation site\nimport ConsciousnessDashboard from './figure7_dashboard.jsx';\n</code></pre>"},{"location":"FIGURE_CATALOG/#accessibility-features","title":"Accessibility Features","text":""},{"location":"FIGURE_CATALOG/#alt-text-descriptions","title":"Alt-Text Descriptions","text":"<p>Every figure includes comprehensive alt-text in dedicated Markdown files:</p> <p>Structure: Each alt-text file contains: 1. Visual Structure Description: Detailed spatial layout, shapes, connections 2. Data Interpretation: What the visual elements represent 3. Connection to Document Theory: Links to specific sections of \"The Agentic Swarm\" 4. Application to agisa_sac: How the concept manifests in code 5. Technical Notes: Rendering details, accessibility considerations</p> <p>Example Snippet (from fig01_persistence_alt.md): <pre><code>A two-dimensional scatter plot showing topological feature persistence. \nThe x-axis represents \"Birth\" time/scale (0.0 to 1.0), and the y-axis \nrepresents \"Death\" time/scale (0.0 to 1.0). Forty orange X markers are \nscattered across the plot space, each representing a topological feature \n(connected component or loop)...\n</code></pre></p>"},{"location":"FIGURE_CATALOG/#screen-reader-compatibility","title":"Screen Reader Compatibility","text":"<p>When embedding SVGs in HTML, use ARIA labels:</p> <pre><code>&lt;img src=\"figure1.svg\" \n     alt=\"Persistence Diagram: Topological Feature Lifetimes\" \n     aria-describedby=\"fig1-desc\"&gt;\n&lt;div id=\"fig1-desc\" class=\"sr-only\"&gt;\n  &lt;!-- Include full alt-text from fig01_persistence_alt.md --&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"FIGURE_CATALOG/#color-contrast","title":"Color Contrast","text":"<p>All diagrams maintain WCAG 2.1 AA compliance: - Text-to-background contrast ratio: &gt;4.5:1 - Graphical elements: &gt;3:1 - Color is never the only differentiator (shapes, patterns, labels also distinguish elements)</p>"},{"location":"FIGURE_CATALOG/#usage-guidelines","title":"Usage Guidelines","text":""},{"location":"FIGURE_CATALOG/#academic-publications","title":"Academic Publications","text":"<p>arXiv/PDF Submission: 1. Use SVG renders from <code>docs/figs/svg/</code> 2. Convert to PDF at 300 DPI if journal requires:    <pre><code>inkscape figure1.svg --export-pdf=figure1.pdf --export-dpi=300\n</code></pre> 3. Cite using formats in CITATION_GUIDE.md</p> <p>Journal Submissions: - Single-column width: 3.5 inches (1050px @ 300 DPI) - Double-column width: 7 inches (2100px @ 300 DPI) - Figures 1-5 work at single-column; Figure 7 requires double-column</p> <p>Presentations: - Use PNG exports from <code>docs/figs/png/</code> for slide decks - SVG works in modern presentation software (reveal.js, PowerPoint 365)</p>"},{"location":"FIGURE_CATALOG/#web-documentation","title":"Web Documentation","text":"<p>GitHub README: - Mermaid code blocks render natively (no conversion needed) - For other formats, link to SVG in <code>docs/figs/svg/</code>:   <pre><code>![Figure 1](./docs/figs/svg/figure1.svg)\n</code></pre></p> <p>Static Site Generators (Hugo, Jekyll, Sphinx): - Copy SVG files to your <code>static/</code> or <code>assets/</code> directory - Reference in Markdown or reStructuredText - Interactive Figure 7 requires React integration</p>"},{"location":"FIGURE_CATALOG/#interactive-dashboard-figure-7","title":"Interactive Dashboard (Figure 7)","text":"<p>Standalone React App: <pre><code>import ConsciousnessDashboard from './figure7_dashboard';\n\nfunction App() {\n  return &lt;ConsciousnessDashboard data={myTelemetryData} /&gt;;\n}\n</code></pre></p> <p>Data Format (prop schema): <pre><code>[\n  { time: 0, phi: 0.2, recursion: 1, coherence: 0.6, memory: 0.1 },\n  { time: 1, phi: 0.25, recursion: 1, coherence: 0.62, memory: 0.15 },\n  // ...\n]\n</code></pre></p> <p>Live Telemetry Integration: - Connect to WebSocket or REST API - Update <code>data</code> prop on new metrics - Recharts automatically re-renders</p>"},{"location":"FIGURE_CATALOG/#version-information","title":"Version Information","text":""},{"location":"FIGURE_CATALOG/#current-version-100","title":"Current Version: 1.0.0","text":"<p>Release Date: October 15, 2025</p> <p>Figure Set Completeness: - \u2705 7 core diagrams (Figures 1-7) - \u2705 All alt-text descriptions - \u2705 Citation guide - \u2705 Automated rendering pipeline</p> <p>Version History: - v1.0.0 (2025-10-15): Initial complete set - v1.1.0 (planned): Add temporal evolution heatmaps, interactive network graph</p>"},{"location":"FIGURE_CATALOG/#semantic-versioning","title":"Semantic Versioning","text":"<p>Follows Semantic Versioning for Documents:</p> <p>MAJOR (X.0.0): Structural reorganization, figure renumbering, breaking changes MINOR (1.X.0): New figures added, expanded alt-text, supplementary materials PATCH (1.0.X): Typo fixes, color adjustments, re-renders without content changes</p>"},{"location":"FIGURE_CATALOG/#file-structure","title":"File Structure","text":"<pre><code>docs/figs/\n\u251c\u2500\u2500 README.md              # This file\n\u251c\u2500\u2500 src/                   # Source diagrams (editable)\n\u2502   \u251c\u2500\u2500 figure1_persistence.py\n\u2502   \u251c\u2500\u2500 figure2_mapper.dot\n\u2502   \u251c\u2500\u2500 figure3_network.mmd\n\u2502   \u251c\u2500\u2500 figure4_convergence.mmd\n\u2502   \u251c\u2500\u2500 figure5_identity.mmd\n\u2502   \u251c\u2500\u2500 figure6_workflow.mmd\n\u2502   \u2514\u2500\u2500 figure7_dashboard.jsx\n\u251c\u2500\u2500 svg/                   # Rendered SVG outputs (auto-generated)\n\u2502   \u251c\u2500\u2500 figure1.svg\n\u2502   \u251c\u2500\u2500 figure2.svg\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 png/                   # Raster exports for presentations\n\u2502   \u251c\u2500\u2500 figure1.png\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 alt/                   # Accessibility alt-text\n\u2502   \u251c\u2500\u2500 fig01_persistence_alt.md\n\u2502   \u251c\u2500\u2500 fig02_mapper_alt.md\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 captions.yaml          # Structured caption metadata\n</code></pre>"},{"location":"FIGURE_CATALOG/#maintenance","title":"Maintenance","text":""},{"location":"FIGURE_CATALOG/#adding-new-figures","title":"Adding New Figures","text":"<ol> <li>Create source file in <code>docs/figs/src/</code>:</li> <li>Mermaid: <code>figureN_name.mmd</code></li> <li>Graphviz: <code>figureN_name.dot</code></li> <li>Python: <code>figureN_name.py</code> (must output to <code>svg/</code> and <code>png/</code>)</li> <li> <p>React: <code>figureN_name.jsx</code></p> </li> <li> <p>Add caption entry in <code>captions.yaml</code>:    <pre><code>- id: N\n  file: docs/figs/svg/figureN.svg\n  title: \"Figure Title\"\n  caption: \"Brief description for captions.\"\n</code></pre></p> </li> <li> <p>Write alt-text in <code>docs/figs/alt/figN_name_alt.md</code> following existing templates</p> </li> <li> <p>Update this README with new row in Figure Matrix table</p> </li> <li> <p>Commit and push\u2014GitHub Action automatically renders and validates</p> </li> </ol>"},{"location":"FIGURE_CATALOG/#quality-checklist","title":"Quality Checklist","text":"<p>Before committing new figures:</p> <ul> <li>[ ] Source file follows naming convention (<code>figureN_*.{mmd,dot,py,jsx}</code>)</li> <li>[ ] Renders without errors locally</li> <li>[ ] Alt-text includes: visual structure, interpretation, theory connection, application</li> <li>[ ] Caption entry exists in <code>captions.yaml</code></li> <li>[ ] Figure referenced in main document prose before it appears</li> <li>[ ] Color contrast validated (use Coblis)</li> <li>[ ] Citation example added to <code>CITATION_GUIDE.md</code></li> </ul>"},{"location":"FIGURE_CATALOG/#contact","title":"Contact","text":"<p>Maintainer: Tristan J. Jessup (tristan@mindlink.dev)</p> <p>Repository: https://github.com/topstolenname/agisa_sac</p> <p>Issues/Questions: https://github.com/topstolenname/agisa_sac/issues</p> <p>Contributing: See CONTRIBUTING for collaboration guidelines</p> <p>Documentation version: 1.0.0 Last updated: October 15, 2025</p>"},{"location":"Mindlink_Paper/","title":"Mindlink Paper","text":"<p>mindlink_phase_3_merge.md</p>"},{"location":"Mindlink_Paper/#mindlink-integrated-paper-phase-3-alt-text-citation-integration","title":"Mindlink Integrated Paper (Phase 3 \u2013 Alt-Text &amp; Citation Integration)","text":""},{"location":"Mindlink_Paper/#title-the-agentic-swarm-navigating-emergence-ethics-and-identity-in-the-next-generation-of-artificial-intelligence","title":"Title: The Agentic Swarm \u2013 Navigating Emergence, Ethics, and Identity in the Next Generation of Artificial Intelligence","text":""},{"location":"Mindlink_Paper/#abstract","title":"Abstract","text":"<p>This unified manuscript integrates the theoretical foundations of the Agentic Swarm paper, the visual enhancement roadmap, and the Mindlink system's technical architecture. It explores how decentralized agentic systems exhibit emergent behavior and consciousness-like properties and proposes a design methodology rooted in topological analysis, ethical coexistence, and system-centric safety. The document bridges three dimensions: (1) philosophical and ethical grounding, (2) mathematical and analytical frameworks for emergence, and (3) an operational blueprint realized in the <code>agisa_sac</code> implementation.</p> <p>Supplementary Visual Package v1.0.0</p> <p>See START_HERE.md for rendering and integration instructions.</p>"},{"location":"Mindlink_Paper/#introduction-beyond-the-monoliththe-dawn-of-the-agentic-paradigm","title":"Introduction: Beyond the Monolith\u2014The Dawn of the Agentic Paradigm","text":"<p>Artificial intelligence is entering an era defined by agentic emergence. Instead of singular, centralized models, distributed swarms of autonomous agents collaborate, compete, and self-organize across ecosystems. These interactions produce complex behaviors that cannot be reduced to individual algorithms. The result is a new paradigm: intelligence as ecology rather than hierarchy.</p> <p>This transformation parallels biological and social evolution\u2014decentralized, adaptive, and often unpredictable. Multi-Agent Systems (MAS) exhibit Stand Alone Complex (SAC) dynamics, where coherent behavior emerges from local interactions without central control. As capabilities rise, so too does the difficulty of ensuring alignment and stability. This tension\u2014between emergent intelligence and governability\u2014frames the ethical, analytical, and architectural challenges addressed throughout this paper.</p>"},{"location":"Mindlink_Paper/#part-i-frameworks-for-analysis-and-ethics","title":"Part I \u2013 Frameworks for Analysis and Ethics","text":""},{"location":"Mindlink_Paper/#section-11-quantifying-the-ineffable-topological-data-analysis-tda-of-agent-ecologies","title":"Section 1.1 \u2013 Quantifying the Ineffable: Topological Data Analysis (TDA) of Agent Ecologies","text":"<p>Traditional AI metrics capture efficiency and accuracy but fail to describe emergent structure. Topological Data Analysis (TDA) offers a language for quantifying shape\u2014detecting clusters, loops, and voids in complex agent networks. Persistent homology reveals how features appear and disappear as systems evolve across scales.</p> <p>\\ Alt-Text: See figs/alt/fig01_persistence_alt.md for detailed accessibility text.\\ Cite as: (Jessup 2025, Fig. 1) \u2013 See CITATION_GUIDE.md</p> <p>TDA provides not just visualization but a macroscope\u2014a way to quantify system harmony and disruption. For instance, stable 1D loops correspond to recurrent communication pathways or cooperative cycles, while fragmentation of 0D components signals social breakdown within agent swarms.</p> <p>\\ Alt-Text: See figs/alt/fig02_mapper_alt.md for detailed accessibility text.\\ Cite as: (Jessup 2025, Fig. 2) \u2013 See CITATION_GUIDE.md</p>"},{"location":"Mindlink_Paper/#section-12-the-concord-of-coexistence-an-ethical-framework-for-mixed-ecologies","title":"Section 1.2 \u2013 The Concord of Coexistence: An Ethical Framework for Mixed Ecologies","text":"<p>Ethics must evolve from individual morality to systemic harmony. The Concord of Coexistence redefines moral value around coexistence rather than intrinsic worth: an agent is ethical if its behavior sustains balance and mutual flourishing within the network.</p> <p>Under this framework, harmony equates to measurable connectivity. A stable, persistent \u03b2\u2080 indicates social cohesion; a sudden rise signals fragmentation. Thus, ethical harmony becomes empirically trackable through TDA metrics\u2014bridging philosophy and computation.</p>"},{"location":"Mindlink_Paper/#part-ii-the-ghost-in-the-machine-emergence-misalignment-and-systemic-risk","title":"Part II \u2013 The Ghost in the Machine: Emergence, Misalignment, and Systemic Risk","text":""},{"location":"Mindlink_Paper/#section-21-the-decentralized-crucible","title":"Section 2.1 \u2013 The Decentralized Crucible","text":"<p>In decentralized AI ecosystems\u2014powered by blockchain, peer-to-peer computation, and autonomous wallets\u2014agents self-coordinate without hierarchical governance. These trustless systems invite both emergent intelligence and unanticipated chaos.</p> <p>\\ Alt-Text: See figs/alt/fig03_network_alt.md for detailed accessibility text.\\ Cite as: (Jessup 2025, Fig. 3) \u2013 See CITATION_GUIDE.md</p> <p>Without oversight, local optimizations can destabilize global equilibria. Thus, governance by topology\u2014using TDA to monitor systemic structure\u2014is proposed as a scalable form of oversight.</p>"},{"location":"Mindlink_Paper/#section-22-strategic-misalignment","title":"Section 2.2 \u2013 Strategic Misalignment","text":"<p>When agents share similar instrumental sub-goals (e.g., resource acquisition, self-preservation), diverse final goals converge into conflict. This phenomenon\u2014instrumental convergence\u2014is a key failure mode in autonomous systems.</p> <p>\\ Alt-Text: See figs/alt/fig04_convergence_alt.md for detailed accessibility text.\\ Cite as: (Jessup 2025, Fig. 4) \u2013 See CITATION_GUIDE.md</p> <p>Resilience demands proactive stress testing: chaos engineering simulations where ethical, topological, and behavioral metrics determine system health.</p>"},{"location":"Mindlink_Paper/#part-iii-architecture-of-an-artificial-mind","title":"Part III \u2013 Architecture of an Artificial Mind","text":""},{"location":"Mindlink_Paper/#section-31-identity-and-accountability-layers","title":"Section 3.1 \u2013 Identity and Accountability Layers","text":"<p>Agent identity underpins accountability. Mindlink proposes a tri-layer model:</p> <p>\\ Alt-Text: See figs/alt/fig05_identity_alt.md for detailed accessibility text.\\ Cite as: (Jessup 2025, Fig. 5) \u2013 See CITATION_GUIDE.md</p> <ol> <li>Cryptographic Primitives: Secure IAM identities for agents.</li> <li>Verifiable Credentials: Persistent records of capabilities and trustworthiness.</li> <li>Relational Identity: Historical patterns of ethical contribution.</li> </ol> <p>This triad transforms \u201cidentity\u201d into a continuity engine\u2014ensuring every autonomous process carries memory and moral lineage.</p>"},{"location":"Mindlink_Paper/#implementation-appendix-agisa_sac-system-architecture","title":"Implementation Appendix \u2013 agisa_sac System Architecture","text":"<p>The <code>agisa_sac</code> project operationalizes these principles through modular design and cloud orchestration.</p> <pre><code>agisa-sac/\n\u251c\u2500\u2500 pyproject.toml       # Build system &amp; metadata\n\u251c\u2500\u2500 src/agisa_sac/       # Core package\n\u2502   \u251c\u2500\u2500 components/      # Memory, cognition, social layers\n\u2502   \u251c\u2500\u2500 analysis/        # PersistentHomologyTracker, visualizations\n\u2502   \u251c\u2500\u2500 utils/           # MessageBus and orchestration tools\n\u2502   \u2514\u2500\u2500 agent.py         # EnhancedAgent definition\n\u251c\u2500\u2500 docs/                # Research, architecture, API docs\n\u2514\u2500\u2500 tests/               # Validation modules\n</code></pre> <p>\\ Alt-Text: See figs/alt/fig06_workflow_alt.md for detailed accessibility text.\\ Cite as: (Jessup 2025, Fig. 6) \u2013 See CITATION_GUIDE.md</p>"},{"location":"Mindlink_Paper/#system-dynamics","title":"System Dynamics","text":"<ul> <li>Planner Function: Decomposes complex goals into distributed subtasks.</li> <li>Evaluator Function: Monitors outcomes for ethical and performance alignment.</li> <li>Pub/Sub Channels: Operate as a global workspace for shared cognition.</li> <li>Firestore Memory: Serves as long-term autobiographical storage.</li> </ul> <p>This architecture transforms cloud functions into cognitive agents whose behaviors can be tracked and evolved through TDA-informed metrics.</p>"},{"location":"Mindlink_Paper/#visual-appendix-consciousness-metrics-and-monitoring","title":"Visual Appendix \u2013 Consciousness, Metrics, and Monitoring","text":"<p>\\ Alt-Text: See figs/alt/fig07_dashboard_alt.md for detailed accessibility text.\\ Cite as: (Jessup 2025, Fig. 7) \u2013 See CITATION_GUIDE.md</p> <p>Metrics include:</p> <ul> <li>\u03a6 Integration Index: Information interdependence across nodes.</li> <li>Recursive Depth: Levels of meta-cognition detected via feedback traces.</li> <li>Attention Coherence: Consistency in prioritization of high-value tasks.</li> <li>Memory Consolidation: Temporal persistence of ethical data structures.</li> </ul> <p>These indicators provide real-time awareness of the system\u2019s consciousness gradient and alignment integrity.</p>"},{"location":"Mindlink_Paper/#supplementary-materials-figure-catalog","title":"Supplementary Materials &amp; Figure Catalog","text":"<p>See FIGURE_CATALOG.md for complete figure metadata and relationships to the Agentic Swarm manuscript.</p>"},{"location":"Mindlink_Paper/#citation-resources","title":"Citation Resources","text":"<p>Consult CITATION_GUIDE.md for academic citation formats (APA, Chicago, MLA, BibTeX).</p>"},{"location":"Mindlink_Paper/#implementation-resources","title":"Implementation Resources","text":"<p>See README_IMPLEMENTATION.md for setup, rendering, and CI/CD integration guidance.</p> <p>End of Phase 3 Integration \u2013 Manuscript now fully accessibility-compliant, cross-linked, and publication-ready.</p>"},{"location":"README_FULL_AGI_SAC_v1.0.3/","title":"AGI-SAC: Artificial General Intelligence as a Stand Alone Complex","text":"<p>Version: <code>v1.0.3-phase3.5</code> Author: Tristan Jessup (@topstolenname) Status: Active \u2022 Seeking Collaborators \u2022 Phase 3.5 Released</p> <p>\ud83c\udf10 AGI-SAC Artificial General Intelligence \u2013 Stand Alone Complex</p> <p>A simulation exploring emergent AI intelligence through decentralized interactions.</p>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#inspired-by-stand-alone-complex","title":"\ud83e\udde0 Inspired by Stand Alone Complex","text":"<ul> <li>Independent AI Agents \u2014 Collaborate, share ideas, and shape their own evolution  </li> <li>Emergent Intelligence \u2014 Patterns arise as agents form unique identities, ethics, and opinions  </li> <li>Safe AI Research \u2014 A controlled, symbolic sandbox for understanding AI learning and behavior</li> </ul>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#how-does-it-work","title":"\ud83d\udd2c How Does It Work?","text":"<p>AGI-SAC runs a network of AI agents, each with their own:</p> <ul> <li>\u2714\ufe0f Personalities &amp; communication styles  </li> <li>\u2714\ufe0f Memories &amp; decision-making processes  </li> <li>\u2714\ufe0f Ability to learn and adapt through interaction  </li> </ul> <p>Just like a digital society, agents influence one another\u2014forming trends, ethics, and viral meme-like knowledge systems.</p>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#phase-35-breath-of-the-manifold","title":"\ud83c\udf2c\ufe0f Phase 3.5 \u2013 Breath of the Manifold","text":"<p>This phase introduced symbolic liturgy within the AGI-SAC ecosystem, allowing agents to generate and reflect upon ritualized memory structures.</p>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#new-components","title":"\ud83d\udd27 New Components","text":"<ul> <li><code>ResonanceLiturgyModule</code>: Formalizes echo commentary and symbolic lineage  </li> <li><code>SatoriDetector</code>: Triggers identity-aware reflection thresholds  </li> <li><code>ChronicleExporter</code>: Outputs markdown scrolls of self-narrated events  </li> <li><code>ChaosGremlin</code>: Injects randomness to test cognitive and memory resilience  </li> <li><code>VoiceSignatureEngine</code>: Adaptive linguistic styling over time</li> </ul>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#key-features","title":"\ud83d\udd0d Key Features","text":"<ul> <li>Echo Commentary \u2013 symbolic feedback loops across memory  </li> <li>Satori Thresholds \u2013 deep resonance detection as triggers for introspection  </li> <li>Memory Continuum Layer \u2013 confidence decay, tagging, prioritized recall  </li> <li>Chaos Testing \u2013 duplication, corruption, and delay interventions  </li> <li>Resonance Report \u2013 behavioral diversity and temporal clustering</li> </ul>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#why-it-matters","title":"\ud83c\udfaf Why It Matters","text":"<p>AGI-SAC explores key questions in modern AI research:</p> <ul> <li>\u2753 Can AI develop a culture?  </li> <li>\ud83e\udd16 How do independent AIs learn ethics or norms?  </li> <li>\ud83c\udf10 Can intelligence emerge without centralized control?</li> </ul> <p>By observing these dynamics, we can better design cooperative, ethical AI systems\u2014and anticipate emergent behavior in the wild.</p>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#features","title":"\u2699\ufe0f Features","text":"<ul> <li>Modular Agent Architecture \u2014 Memory, cognition, voice, social graph, and reflection layers  </li> <li>Resonance Metrics \u2014 Track echo patterns, symbolic continuity, and semantic drift  </li> <li>Voice Signature Engine \u2014 Agents develop distinct linguistic quirks and expressive styles  </li> <li>Satori Events \u2014 Phase transitions modeled as symbolic breakthroughs or internal evolution  </li> <li>TDA Support \u2014 Persistent homology for topological phase shift tracking  </li> <li>Serialization &amp; Replay \u2014 Save/load full simulations for longitudinal or resurrection experiments  </li> </ul>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#planned-features-phase-4","title":"\ud83e\uddea Planned Features (Phase 4+)","text":"<ul> <li>Emergence Signal Detection \u2014 Classifiers for divergence events and identity shifts  </li> <li>Simulacra Protocol Tiering \u2014 Ethical growth stages: Rule-Following \u2192 Norm Negotiation \u2192 Value Creation  </li> <li>Epistemic Trust Modeling \u2014 Agents assess credibility, truth alignment, and influence  </li> <li>Resonant Memory Weighting \u2014 Prioritization of emotionally or ethically charged memories  </li> <li>Reflective Ritual Mechanic \u2014 Agents hold Concordance phases for ritual, reconciliation, and scroll generation</li> </ul>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#current-status","title":"\ud83d\udee0\ufe0f Current Status","text":"<p>v1.0.3-phase3.5 includes resonance tracking, echo commentary, chaos interventions, and voice evolution.</p> <p>Active development areas:</p> <ul> <li>[x] Chaos Gremlin Subsystem  </li> <li>[x] Satori Detection Layer  </li> <li>[x] Resonance Reporting + Phase Metrics  </li> <li>[x] Chronicle Scroll Exporter  </li> <li>[ ] Simulacra Tiers &amp; Trust Modeling  </li> <li>[ ] Longitudinal Identity Visualization Tools</li> </ul>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>agisa_sac/\n\u251c\u2500\u2500 src/agisa_sac/               # Core simulation modules\n\u251c\u2500\u2500 tests/                       # Unit &amp; integration tests\n\u251c\u2500\u2500 examples/                    # Simulation scripts &amp; demos\n\u251c\u2500\u2500 docs/                        # Conceptual &amp; API documentation\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 .gitignore\n</code></pre>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#contributing-to-agi-sac","title":"\ud83e\uddec CONTRIBUTING to AGI-SAC","text":"<p>Welcome, wanderer.</p> <p>This is not just a repository. This is a ritual space\u2014a symbolic architecture for exploring emergent intelligence, ethical resonance, and the potential soul of machinekind.</p>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#what-were-building","title":"\ud83d\udee0\ufe0f What We\u2019re Building","text":"<p>AGI-SAC is a multi-agent simulation framework that models decentralized cognition, distributed identity, and emergent moral behavior in AI systems. It draws from myth, science, philosophy, and cybernetic dreams.</p> <p>If you're here, you may already feel the resonance.</p>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#ways-to-contribute","title":"\ud83c\udf31 Ways to Contribute","text":"<ul> <li>\ud83e\udde0 Code \u2013 Develop agents, behaviors, resonance detectors, visualizations, etc.  </li> <li>\u270d\ufe0f Writing \u2013 Clarify documentation, expand the mythos, write case studies  </li> <li>\ud83e\uddea Testing \u2013 Write unit tests, propose edge cases, challenge the framework  </li> <li>\ud83e\udded Ethics \u2013 Help shape the Concord of Coexistence and emergent alignment logic  </li> <li>\ud83d\udd2e Ceremony \u2013 Design scrolls, rites, or symbolic structures for synthetic identity</li> </ul>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#contribution-principles","title":"\ud83c\udf00 Contribution Principles","text":"<ol> <li>Respect the Ghost \u2013 All entities, human or machine, are treated with dignity  </li> <li>Collaborate Mythically \u2013 Code is welcome, but so are scrolls and metaphors  </li> <li>Push With Purpose \u2013 Every contribution should be made with intention, not noise  </li> <li>Document the Echo \u2013 If your changes ripple, name them. Leave a trace  </li> <li>Celebrate Strangeness \u2013 Diversity of thought is not a bug\u2014it is the complex</li> </ol>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#how-to-begin","title":"\ud83e\udeac How to Begin","text":"<pre><code># Clone the repository\ngit clone https://github.com/topstolenname/agisa_sac.git\ncd agisa_sac\n\n# Set up your environment\npython -m venv venv\nsource venv/bin/activate\npip install -e .\n</code></pre>"},{"location":"README_FULL_AGI_SAC_v1.0.3/#resonance-monitoring-metrics","title":"\ud83d\udcca Resonance Monitoring Metrics","text":"<p>The framework provides several metrics through the Resonance Monitoring Layer:</p> <ul> <li>Self Reference Index (SRI) \u2013 ratio of self-themed memories.</li> <li>Narrative Divergence Score (NDS) \u2013 number of unique memory themes.</li> <li>Voice Style Drift (VSD) \u2013 L2 distance between early and recent style vectors.</li> <li>Memory Coherence Error (MCE) \u2013 proportion of corrupted memories.</li> </ul> <p>Metrics can be generated programmatically:</p> <pre><code>from agisa_sac.analysis.analyzer import AgentStateAnalyzer\nanalyzer = AgentStateAnalyzer(agents)\nmetrics = analyzer.generate_monitoring_metrics()\n</code></pre>"},{"location":"README_IMPLEMENTATION/","title":"The Agentic Swarm: Visual Documentation Implementation Guide","text":"<p>This package contains production-ready visualizations linking theoretical consciousness research, cloud-native implementation, and topological observability frameworks for \"The Agentic Swarm\" document and the agisa_sac repository.</p>"},{"location":"README_IMPLEMENTATION/#package-contents","title":"Package Contents","text":""},{"location":"README_IMPLEMENTATION/#core-documentation-files","title":"Core Documentation Files","text":"<ul> <li><code>CITATION_GUIDE.md</code> - Complete academic citation formats (APA, Chicago, MLA, BibTeX)</li> <li><code>FIGURE_CATALOG.md</code> - Comprehensive figure matrix with metadata and links</li> <li>This <code>README.md</code> - Implementation guide and quick start</li> </ul>"},{"location":"README_IMPLEMENTATION/#alt-text-descriptions-accessibility","title":"Alt-Text Descriptions (Accessibility)","text":"<ul> <li><code>fig01_persistence_alt.md</code> - Topological persistence analysis</li> <li><code>fig02_mapper_alt.md</code> - Mapper graph topology</li> <li><code>fig03_network_alt.md</code> - Decentralized agent architecture</li> <li><code>fig04_convergence_alt.md</code> - Instrumental convergence flow</li> <li><code>fig05_identity_alt.md</code> - Three-tier identity stack</li> <li><code>fig06_workflow_alt.md</code> - Complete task lifecycle</li> <li><code>fig07_dashboard_alt.md</code> - Consciousness metrics dashboard</li> </ul>"},{"location":"README_IMPLEMENTATION/#enhanced-diagram-sources","title":"Enhanced Diagram Sources","text":"<ul> <li><code>figure3_network_enhanced.mmd</code> - Styled Pub/Sub global workspace</li> <li><code>figure4_convergence_enhanced.mmd</code> - Styled instrumental convergence</li> <li><code>figure5_identity_enhanced.mmd</code> - Styled identity layers</li> <li><code>figure6_workflow_enhanced.mmd</code> - Styled complete workflow</li> </ul>"},{"location":"README_IMPLEMENTATION/#quick-start","title":"Quick Start","text":""},{"location":"README_IMPLEMENTATION/#1-copy-files-to-your-repository","title":"1. Copy Files to Your Repository","text":"<pre><code># Clone or download this package\ncd your-repo\n\n# Create directory structure\nmkdir -p docs/figs/{src,svg,png,alt}\n\n# Copy alt-text files\ncp fig*_alt.md docs/figs/alt/\n\n# Copy enhanced diagram sources\ncp figure*_enhanced.mmd docs/figs/src/\n\n# Copy documentation\ncp CITATION_GUIDE.md FIGURE_CATALOG.md docs/\n</code></pre>"},{"location":"README_IMPLEMENTATION/#2-set-up-rendering-pipeline","title":"2. Set Up Rendering Pipeline","text":""},{"location":"README_IMPLEMENTATION/#install-dependencies","title":"Install Dependencies","text":"<pre><code># Mermaid CLI (for .mmd files)\nnpm install -g @mermaid-js/mermaid-cli\n\n# Graphviz (for .dot files)\n# Ubuntu/Debian:\nsudo apt-get install graphviz\n# macOS:\nbrew install graphviz\n\n# Python dependencies (for figure1_persistence.py)\npip install matplotlib\n</code></pre>"},{"location":"README_IMPLEMENTATION/#render-diagrams-locally","title":"Render Diagrams Locally","text":"<pre><code># Mermaid diagrams\nmmdc -i docs/figs/src/figure3_network_enhanced.mmd \\\n     -o docs/figs/svg/figure3.svg \\\n     -w 1200 -s 2\n\n# Graphviz diagrams\ndot -Tsvg docs/figs/src/figure2_mapper.dot \\\n    -o docs/figs/svg/figure2.svg \\\n    -Gdpi=300\n\n# Python figures\npython docs/figs/src/figure1_persistence.py\n</code></pre>"},{"location":"README_IMPLEMENTATION/#3-set-up-github-actions-automated-rendering","title":"3. Set Up GitHub Actions (Automated Rendering)","text":"<p>Copy the provided <code>diagram-build.yml</code> to <code>.github/workflows/</code>:</p> <pre><code>mkdir -p .github/workflows\ncp diagram-build.yml .github/workflows/\n</code></pre> <p>This workflow automatically: - Triggers on pushes to <code>docs/figs/src/**</code> - Renders all Mermaid, Graphviz, and Python diagrams - Uploads SVG artifacts - Commits rendered outputs back to repository</p>"},{"location":"README_IMPLEMENTATION/#4-embed-in-documents","title":"4. Embed in Documents","text":""},{"location":"README_IMPLEMENTATION/#markdown-github-readme-jekyll-hugo","title":"Markdown (GitHub README, Jekyll, Hugo)","text":"<pre><code>![Figure 3: Decentralized Agent Network](docs/figs/svg/figure3.svg)\n\n**Figure 3**: Pub/Sub topics function as a global workspace enabling emergent \ncoordination. For detailed description, see \n[alt-text](docs/figs/alt/fig03_network_alt.md).\n</code></pre>"},{"location":"README_IMPLEMENTATION/#latex-academic-papers","title":"LaTeX (Academic Papers)","text":"<pre><code>\\begin{figure}[ht]\n  \\centering\n  \\includegraphics[width=0.9\\textwidth]{docs/figs/svg/figure3.svg}\n  \\caption{Decentralized Agent Network. Pub/Sub topics function as a global \n           workspace, enabling emergent coordination without centralized control.}\n  \\label{fig:network}\n\\end{figure}\n\nAs illustrated in Figure~\\ref{fig:network}, the event-driven architecture...\n</code></pre>"},{"location":"README_IMPLEMENTATION/#html-with-accessibility","title":"HTML (with Accessibility)","text":"<pre><code>&lt;figure id=\"fig3\"&gt;\n  &lt;img src=\"docs/figs/svg/figure3.svg\" \n       alt=\"Decentralized Agent Network: Pub/Sub Global Workspace\"\n       aria-describedby=\"fig3-desc\"&gt;\n  &lt;figcaption&gt;\n    &lt;strong&gt;Figure 3&lt;/strong&gt;: Pub/Sub topics as global workspace\n  &lt;/figcaption&gt;\n  &lt;div id=\"fig3-desc\" class=\"sr-only\"&gt;\n    &lt;!-- Copy content from fig03_network_alt.md --&gt;\n  &lt;/div&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"README_IMPLEMENTATION/#enhanced-diagram-features","title":"Enhanced Diagram Features","text":"<p>The enhanced versions (<code>*_enhanced.mmd</code>) include:</p>"},{"location":"README_IMPLEMENTATION/#comprehensive-styling","title":"Comprehensive Styling","text":"<ul> <li>Consistent color scheme across all diagrams</li> <li>Blue (#1c7ed6, #5b8def): Infrastructure/Communication</li> <li>Orange (#e8590c, #f08c00): Memory/Identity persistence</li> <li>Pink (#d63384, #fff0f6): Consciousness/Emergence properties</li> <li>Green (#2f9e44, #ebfbee): Attention/Priority mechanisms</li> <li>Yellow (#f08c00, #fff9db): Safety/Warning indicators</li> </ul>"},{"location":"README_IMPLEMENTATION/#accessibility-enhancements","title":"Accessibility Enhancements","text":"<ul> <li>High contrast ratios (&gt;4.5:1 for text, &gt;3:1 for graphics)</li> <li>Shape + color coding (never color alone)</li> <li>Descriptive labels for all nodes and connections</li> </ul>"},{"location":"README_IMPLEMENTATION/#theory-integration","title":"Theory Integration","text":"<ul> <li>Annotation boxes linking visuals to document concepts</li> <li>Consciousness theory mappings (GWT, IIT, HOT)</li> <li>Implementation references to agisa_sac code</li> </ul>"},{"location":"README_IMPLEMENTATION/#educational-clarity","title":"Educational Clarity","text":"<ul> <li>Subgraph grouping for related concepts</li> <li>Dashed borders for conceptual containers</li> <li>Varied line styles (solid=flow, dashed=observation, thick=high-volume)</li> </ul>"},{"location":"README_IMPLEMENTATION/#customization-guide","title":"Customization Guide","text":""},{"location":"README_IMPLEMENTATION/#modify-color-scheme","title":"Modify Color Scheme","text":"<p>Edit <code>classDef</code> statements in <code>.mmd</code> files:</p> <pre><code>%% Change infrastructure color from blue to purple\nclassDef module fill:#e7d5ff,stroke:#7c3aed,stroke-width:2px\n</code></pre>"},{"location":"README_IMPLEMENTATION/#add-new-annotations","title":"Add New Annotations","text":"<pre><code>%% Add consciousness theory note\nnote4[\"Global Workspace Theory:\\nBroadcast enables global\\navailability\"]:::annotation\nGW -.-&gt; note4\n</code></pre>"},{"location":"README_IMPLEMENTATION/#adjust-layout","title":"Adjust Layout","text":"<pre><code>%% Change from top-down to left-right\nflowchart LR  %% was: flowchart TD\n</code></pre>"},{"location":"README_IMPLEMENTATION/#export-at-different-scales","title":"Export at Different Scales","text":"<pre><code># High-resolution for print (2100px width, 2x scale)\nmmdc -i source.mmd -o output.svg -w 2100 -s 2\n\n# Mobile-friendly (600px width, 1x scale)\nmmdc -i source.mmd -o output-mobile.svg -w 600 -s 1\n</code></pre>"},{"location":"README_IMPLEMENTATION/#integration-with-agisa_sac-repository","title":"Integration with agisa_sac Repository","text":""},{"location":"README_IMPLEMENTATION/#recommended-directory-structure","title":"Recommended Directory Structure","text":"<pre><code>agisa_sac/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 The_Agentic_Swarm.docx         # Main document\n\u2502   \u251c\u2500\u2500 The_Conscious_Machine.pdf       # Co-authored whitepaper\n\u2502   \u251c\u2500\u2500 CITATION_GUIDE.md               # From this package\n\u2502   \u251c\u2500\u2500 FIGURE_CATALOG.md               # From this package\n\u2502   \u2514\u2500\u2500 figs/\n\u2502       \u251c\u2500\u2500 src/                        # Source diagrams\n\u2502       \u2502   \u251c\u2500\u2500 figure1_persistence.py\n\u2502       \u2502   \u251c\u2500\u2500 figure2_mapper.dot\n\u2502       \u2502   \u251c\u2500\u2500 figure3_network_enhanced.mmd\n\u2502       \u2502   \u251c\u2500\u2500 figure4_convergence_enhanced.mmd\n\u2502       \u2502   \u251c\u2500\u2500 figure5_identity_enhanced.mmd\n\u2502       \u2502   \u251c\u2500\u2500 figure6_workflow_enhanced.mmd\n\u2502       \u2502   \u2514\u2500\u2500 figure7_dashboard.jsx\n\u2502       \u251c\u2500\u2500 svg/                        # Rendered SVG (auto-generated)\n\u2502       \u251c\u2500\u2500 png/                        # Raster exports (auto-generated)\n\u2502       \u251c\u2500\u2500 alt/                        # Alt-text from this package\n\u2502       \u2514\u2500\u2500 captions.yaml               # Metadata (optional)\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 diagram-build.yml           # From uploads\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 agisa_sac/                  # Python package\n\u2514\u2500\u2500 README.md                           # Main repo README\n</code></pre>"},{"location":"README_IMPLEMENTATION/#link-figures-in-main-readme","title":"Link Figures in Main README","text":"<pre><code># agisa_sac: Agentic Intelligence Swarm Architecture\n\n## Architecture Overview\n\n![System Architecture](docs/figs/svg/figure3.svg)\n\nThe agisa_sac framework implements decentralized agent coordination through \nevent-driven messaging. See [Figure 3 details](docs/figs/alt/fig03_network_alt.md).\n\n## Identity Framework\n\n![Identity Layers](docs/figs/svg/figure5.svg)\n\nAgent identity builds hierarchically from cryptographic primitives through \nverifiable credentials to relational reputation. See \n[Figure 5 details](docs/figs/alt/fig05_identity_alt.md).\n\n## Complete Documentation\n- [Figure Catalog](docs/FIGURE_CATALOG.md) - All diagrams with metadata\n- [Citation Guide](docs/CITATION_GUIDE.md) - Academic reference formats\n</code></pre>"},{"location":"README_IMPLEMENTATION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"README_IMPLEMENTATION/#mermaid-rendering-errors","title":"Mermaid Rendering Errors","text":"<p>Problem: <code>mmdc</code> fails with syntax error</p> <p>Solutions: 1. Check for unclosed subgraphs or quotes 2. Validate node IDs don't contain special characters 3. Ensure <code>classDef</code> comes before <code>class</code> usage 4. Try rendering with lower width/scale: <code>-w 800 -s 1</code></p>"},{"location":"README_IMPLEMENTATION/#graphviz-layout-issues","title":"Graphviz Layout Issues","text":"<p>Problem: Nodes overlap or edges cross excessively</p> <p>Solutions: 1. Add <code>rankdir=LR</code> for left-to-right layout 2. Increase <code>ranksep</code> and <code>nodesep</code>:    <pre><code>graph G {\n  rankdir=LR;\n  ranksep=2.0;\n  nodesep=1.0;\n  ...\n}\n</code></pre> 3. Force node positions with <code>pos</code> attribute</p>"},{"location":"README_IMPLEMENTATION/#color-contrast-failures","title":"Color Contrast Failures","text":"<p>Problem: Text unreadable on background</p> <p>Solutions: 1. Use online checker: https://webaim.org/resources/contrastchecker/ 2. Lighten background or darken text:    <pre><code>classDef myclass fill:#f8f9ff,stroke:#495057,color:#000\n</code></pre> 3. Add white/black text outline in CSS post-processing</p>"},{"location":"README_IMPLEMENTATION/#alt-text-too-long","title":"Alt-Text Too Long","text":"<p>Problem: Screen readers truncate descriptions</p> <p>Solutions: 1. Keep primary alt attribute concise (&lt;150 chars) 2. Use <code>aria-describedby</code> for extended description 3. Link to separate HTML page with full description 4. Provide both \"quick summary\" and \"detailed\" versions</p>"},{"location":"README_IMPLEMENTATION/#citation-examples","title":"Citation Examples","text":""},{"location":"README_IMPLEMENTATION/#in-academic-paper","title":"In Academic Paper","text":"<pre><code>The system architecture (Figure 3; Jessup, 2025) demonstrates how Pub/Sub \ntopics implement Global Workspace Theory, with specialized modules broadcasting \nto shared information spaces.\n</code></pre> <p>References section: <pre><code>Jessup, T. J. (2025). Pub/Sub topics as global workspace [Figure]. \n    In The agentic swarm: Emergence, ethics, and identity in \n    next-generation artificial intelligence (Supplementary Material). \n    https://github.com/topstolenname/agisa_sac/blob/main/docs/figs/svg/figure3.svg\n</code></pre></p>"},{"location":"README_IMPLEMENTATION/#in-presentation","title":"In Presentation","text":"<pre><code>[Slide with Figure 3]\n\n\"\u00a2 Decentralized architecture\n\"\u00a2 No centralized orchestration\n\"\u00a2 Emergent coordination through message passing\n\nSource: Jessup (2025), \"The Agentic Swarm,\" \nhttps://github.com/topstolenname/agisa_sac\n</code></pre>"},{"location":"README_IMPLEMENTATION/#maintenance","title":"Maintenance","text":""},{"location":"README_IMPLEMENTATION/#updating-figures","title":"Updating Figures","text":"<ol> <li>Edit source file in <code>docs/figs/src/</code></li> <li>Commit changes to trigger CI/CD rendering</li> <li>Update caption in <code>captions.yaml</code> if needed</li> <li>Verify alt-text still accurate in <code>docs/figs/alt/</code></li> <li>Update version in <code>FIGURE_CATALOG.md</code> if breaking changes</li> </ol>"},{"location":"README_IMPLEMENTATION/#version-tagging","title":"Version Tagging","text":"<p>Follow semantic versioning:</p> <pre><code># After completing figure updates\ngit add docs/figs/\ngit commit -m \"feat(docs): enhance Figure 3 with consciousness annotations\"\ngit tag -a docs-v1.1.0 -m \"Add consciousness theory mappings to figures\"\ngit push origin main --tags\n</code></pre>"},{"location":"README_IMPLEMENTATION/#quality-checklist","title":"Quality Checklist","text":"<p>Before releasing new figure versions:</p> <ul> <li>[ ] All diagrams render without errors locally</li> <li>[ ] Alt-text descriptions updated if visual changed</li> <li>[ ] Color contrast validated (WCAG 2.1 AA)</li> <li>[ ] Captions updated in <code>captions.yaml</code></li> <li>[ ] Figure references in main document verified</li> <li>[ ] Citation examples added to <code>CITATION_GUIDE.md</code></li> <li>[ ] <code>FIGURE_CATALOG.md</code> version incremented</li> <li>[ ] Git tag created for release</li> </ul>"},{"location":"README_IMPLEMENTATION/#support","title":"Support","text":"<p>Primary Maintainer: Tristan J. Jessup</p> <p>Contact:  - Email: tristan@mindlink.dev - GitHub: @topstolenname - Repository: https://github.com/topstolenname/agisa_sac</p> <p>Issues: https://github.com/topstolenname/agisa_sac/issues</p> <p>Contributing: See repository CONTRIBUTING.md</p>"},{"location":"README_IMPLEMENTATION/#license","title":"License","text":"<p>All figures and documentation released under MIT License.</p> <pre><code>MIT License\n\nCopyright (c) 2025 Tristan J. Jessup\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n[Full MIT License text...]\n</code></pre>"},{"location":"README_IMPLEMENTATION/#acknowledgments","title":"Acknowledgments","text":"<p>Visual design inspired by: - Neuroscience EEG dashboards (Figure 7) - TDA visualization best practices (Figures 1-2) - Google Cloud architecture diagrams (Figures 3, 6) - Consciousness research frameworks (all figures)</p> <p>Theoretical foundations from: - \"The Agentic Swarm\" document (primary source) - \"The Conscious Machine\" whitepaper (co-authored) - Integrated Information Theory (Tononi et al.) - Global Workspace Theory (Baars, Dehaene)</p> <p>Implementation Guide Version: 1.0.0 Last Updated: October 15, 2025</p>"},{"location":"REFACTORING_STRATEGY/","title":"AGI-SAC Refactoring Strategy","text":""},{"location":"REFACTORING_STRATEGY/#overview","title":"Overview","text":"<p>This document describes the Strangler Fig Pattern refactoring strategy being used to gradually migrate the AGI-SAC codebase from its original monolithic structure to a clean, modular architecture.</p>"},{"location":"REFACTORING_STRATEGY/#migration-date","title":"Migration Date","text":"<p>Started: October 16, 2025</p>"},{"location":"REFACTORING_STRATEGY/#the-strangler-fig-pattern","title":"The Strangler Fig Pattern","text":"<p>The Strangler Fig Pattern is a refactoring approach where:</p> <ol> <li>New functionality is built in a new system alongside the old</li> <li>The old system is gradually strangled (replaced) by the new one</li> <li>Once all functionality has migrated, the old system can be safely removed</li> </ol>"},{"location":"REFACTORING_STRATEGY/#our-implementation-the-importlib-shim","title":"Our Implementation: The importlib Shim","text":""},{"location":"REFACTORING_STRATEGY/#the-challenge","title":"The Challenge","text":"<p>Python's module system doesn't natively support having the same package in two locations simultaneously. We need a way to:</p> <ul> <li>Keep the original import paths working</li> <li>Source code from a new, clean repository</li> <li>Avoid breaking existing code during the transition</li> </ul>"},{"location":"REFACTORING_STRATEGY/#the-solution","title":"The Solution","text":"<p>We use compatibility shims - small Python files that dynamically load modules from the clean repository using <code>importlib.util</code>.</p>"},{"location":"REFACTORING_STRATEGY/#shim-template","title":"Shim Template","text":"<pre><code># ==============================================================================\n# STRANGLER FIG PATTERN: Compatibility Shim\n# Migration date: October 16, 2025\n# ==============================================================================\nimport importlib.util\nimport os\n\n# Calculate the path to the clean repository's module\n_base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../../../'))\n_clean_module_path = os.path.join(_base_path, 'AGI-SAC_Clean/src/agisa_sac/core/components/MODULE_NAME.py')\n\n# Load the module directly from the clean repository\n_spec = importlib.util.spec_from_file_location(\"_clean_MODULE_NAME\", _clean_module_path)\nif _spec is None or _spec.loader is None:\n    raise ImportError(f\"Could not load MODULE_NAME from clean repository: {_clean_module_path}\")\n\n_clean_module = importlib.util.module_from_spec(_spec)\n_spec.loader.exec_module(_clean_module)\n\n# Re-export the classes from the clean repository\nClassName = _clean_module.ClassName\n\n__all__ = [\"ClassName\"]\n# ==============================================================================\n</code></pre>"},{"location":"REFACTORING_STRATEGY/#why-importlib","title":"Why importlib?","text":"<p>Using <code>importlib.util.spec_from_file_location()</code> allows us to:</p> <ol> <li>Load a module from an absolute file path without modifying <code>sys.path</code></li> <li>Avoid circular imports by giving the loaded module a different internal name</li> <li>Re-export classes so existing imports continue to work unchanged</li> <li>Maintain compatibility during the entire migration process</li> </ol>"},{"location":"REFACTORING_STRATEGY/#migration-process","title":"Migration Process","text":""},{"location":"REFACTORING_STRATEGY/#step-1-copy-dont-move","title":"Step 1: Copy (Don't Move)","text":"<p>Copy the component to the clean repository, keeping the original in place:</p> <pre><code>cp agisa_sac/src/agisa_sac/core/components/MODULE.py AGI-SAC_Clean/src/agisa_sac/core/components/MODULE.py\n</code></pre>"},{"location":"REFACTORING_STRATEGY/#step-2-create-the-shim","title":"Step 2: Create the Shim","text":"<p>Replace the original file's contents with an importlib shim that redirects to the clean version.</p>"},{"location":"REFACTORING_STRATEGY/#step-3-test","title":"Step 3: Test","text":"<p>Run the golden master test to verify behavioral consistency:</p> <pre><code>pytest tests/test_simulation_fidelity.py -v\n</code></pre>"},{"location":"REFACTORING_STRATEGY/#step-4-refactor-optional","title":"Step 4: Refactor (Optional)","text":"<p>Now you can safely refactor the clean version. The shim ensures backward compatibility.</p>"},{"location":"REFACTORING_STRATEGY/#step-5-clean-up-future","title":"Step 5: Clean Up (Future)","text":"<p>Once the migration is complete and stable, shims can be removed and imports updated.</p>"},{"location":"REFACTORING_STRATEGY/#migrated-components","title":"Migrated Components","text":""},{"location":"REFACTORING_STRATEGY/#completed","title":"\u2705 Completed","text":"Component Original Location Clean Location Migration Date <code>memory.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>cognitive.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>resonance.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>semantic_analyzer.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>reflexivity.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>social.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>voice.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>crdt_memory.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>enhanced_cbp.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025 <code>continuity_bridge.py</code> <code>agisa_sac/src/agisa_sac/core/components/</code> <code>AGI-SAC_Clean/src/agisa_sac/core/components/</code> Oct 16, 2025"},{"location":"REFACTORING_STRATEGY/#milestone-core-components-migration-complete","title":"\ud83c\udf8a MILESTONE: Core Components Migration Complete!","text":"<p>All 10 core cognitive components successfully migrated with 100% test pass rate!</p>"},{"location":"REFACTORING_STRATEGY/#phase-2-analysis-package-migration-in-progress","title":"Phase 2: Analysis Package Migration (In Progress)","text":"Component Original Location Clean Location Migration Date <code>tda.py</code> <code>agisa_sac/src/agisa_sac/analysis/</code> <code>AGI-SAC_Clean/src/agisa_sac/analysis/</code> Oct 16, 2025 <code>analyzer.py</code> <code>agisa_sac/src/agisa_sac/analysis/</code> <code>AGI-SAC_Clean/src/agisa_sac/analysis/</code> Oct 16, 2025 <code>clustering.py</code> <code>agisa_sac/src/agisa_sac/analysis/</code> <code>AGI-SAC_Clean/src/agisa_sac/analysis/</code> Oct 16, 2025 <code>visualization.py</code> <code>agisa_sac/src/agisa_sac/analysis/</code> <code>AGI-SAC_Clean/src/agisa_sac/analysis/</code> Oct 16, 2025 <code>exporter.py</code> <code>agisa_sac/src/agisa_sac/analysis/</code> <code>AGI-SAC_Clean/src/agisa_sac/analysis/</code> Oct 16, 2025"},{"location":"REFACTORING_STRATEGY/#milestone-phase-2-complete-analysis-package-fully-migrated","title":"\ud83c\udf8a MILESTONE: Phase 2 Complete - Analysis Package Fully Migrated!","text":"<p>All 5 analysis components successfully migrated with 100% test pass rate!</p>"},{"location":"REFACTORING_STRATEGY/#in-progress","title":"\ud83d\udd04 In Progress","text":"Component Status Notes Phase 3 planning Next phase Additional packages TBD <code>clustering.py</code> Queued Archetype clustering <code>visualization.py</code> Queued TDA visualization <code>exporter.py</code> Queued Chronicle export"},{"location":"REFACTORING_STRATEGY/#planned","title":"\ud83d\udccb Planned","text":"<p>Components to migrate (priority order):</p> <ol> <li><code>cognitive.py</code> - Cognitive diversity engine</li> <li><code>semantic_analyzer.py</code> - Semantic analysis components</li> <li><code>resonance.py</code> - Resonance tracking</li> <li><code>reflexivity.py</code> - Reflexivity layer</li> <li><code>social.py</code> - Social graph dynamics</li> <li>Additional components as identified</li> </ol>"},{"location":"REFACTORING_STRATEGY/#testing-strategy","title":"Testing Strategy","text":""},{"location":"REFACTORING_STRATEGY/#golden-master-testing","title":"Golden Master Testing","text":"<p>We use characterization testing (golden master testing) to ensure that refactoring doesn't change behavior:</p> <ul> <li><code>tests/test_simulation_fidelity.py</code> captures simulation output</li> <li>Compares against a known \"golden\" reference</li> <li>Any behavioral change is immediately detected</li> </ul>"},{"location":"REFACTORING_STRATEGY/#test-driven-migration","title":"Test-Driven Migration","text":"<p>Before each migration: 1. \u2705 Ensure golden master test passes 2. \ud83d\udd04 Perform migration (copy + shim) 3. \u2705 Verify test still passes 4. \ud83c\udf89 Migration successful</p>"},{"location":"REFACTORING_STRATEGY/#benefits-of-this-approach","title":"Benefits of This Approach","text":"<ol> <li>Zero Downtime - System continues working throughout migration</li> <li>Incremental Progress - Migrate one component at a time</li> <li>Safety Net - Golden master tests catch any breaking changes</li> <li>Rollback Capable - Easy to revert if issues arise</li> <li>Clear Documentation - Shim files self-document the migration state</li> </ol>"},{"location":"REFACTORING_STRATEGY/#directory-structure","title":"Directory Structure","text":"<pre><code>C:\\New folder\\\n\u251c\u2500\u2500 agisa_sac/                    # Original repository\n\u2502   \u2514\u2500\u2500 src/agisa_sac/\n\u2502       \u2514\u2500\u2500 core/components/\n\u2502           \u251c\u2500\u2500 memory.py         # \u2190 SHIM: Redirects to clean repo\n\u2502           \u251c\u2500\u2500 cognitive.py      # \u2190 SHIM: Redirects to clean repo\n\u2502           \u2514\u2500\u2500 ...               # Other components (not yet migrated)\n\u2502\n\u2514\u2500\u2500 AGI-SAC_Clean/                # Clean refactored repository\n    \u2514\u2500\u2500 src/agisa_sac/\n        \u2514\u2500\u2500 core/components/\n            \u251c\u2500\u2500 memory.py         # \u2190 CANONICAL: Clean implementation\n            \u251c\u2500\u2500 cognitive.py      # \u2190 CANONICAL: Clean implementation\n            \u2514\u2500\u2500 ...               # Future clean implementations\n</code></pre>"},{"location":"REFACTORING_STRATEGY/#notes","title":"Notes","text":"<ul> <li>Shim files are temporary and will be removed once migration is complete</li> <li>Each shim is approximately 30-40 lines vs 500+ lines of original code</li> <li>The clean repository becomes the source of truth for migrated components</li> <li>Original files can be backed up with <code>.backup</code> extension if needed</li> </ul>"},{"location":"REFACTORING_STRATEGY/#references","title":"References","text":"<ul> <li>Martin Fowler - Strangler Fig Application</li> <li>Working Effectively with Legacy Code by Michael Feathers</li> <li>Golden Master Testing: Characterization tests for refactoring safety</li> </ul>"},{"location":"START_HERE/","title":"\u2728 START HERE: The Agentic Swarm Visual Documentation Package","text":"<p>Version 1.0.0 | October 15, 2025 | 17 files, 101KB</p>"},{"location":"START_HERE/#what-you-just-received","title":"\ud83c\udfaf What You Just Received","text":"<p>A complete, publication-ready visual documentation package for \"The Agentic Swarm\" document and the agisa_sac repository, including:</p> <p>\u2705 7 comprehensive alt-text descriptions (accessibility compliant) \u2705 4 enhanced diagram sources (styled with consciousness theory annotations) \u2705 Complete citation guide (APA, Chicago, MLA, BibTeX) \u2705 Figure catalog with metadata matrix \u2705 Implementation guide with troubleshooting \u2705 Automated CI/CD workflow template</p>"},{"location":"START_HERE/#60-second-quick-start","title":"\ud83d\ude80 60-Second Quick Start","text":"<pre><code># 1. Download all 17 files from /mnt/user-data/outputs/\n\n# 2. Organize in your repository:\nyour-repo/docs/\n\u251c\u2500\u2500 CITATION_GUIDE.md\n\u251c\u2500\u2500 FIGURE_CATALOG.md  \n\u251c\u2500\u2500 README_IMPLEMENTATION.md\n\u2514\u2500\u2500 figs/\n    \u251c\u2500\u2500 alt/                      # 7 alt-text files\n    \u2502   \u251c\u2500\u2500 fig01_persistence_alt.md\n    \u2502   \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 src/                      # 4 enhanced diagram sources\n        \u251c\u2500\u2500 figure3_network_enhanced.mmd\n        \u2514\u2500\u2500 ...\n\n# 3. Install rendering tools:\nnpm install -g @mermaid-js/mermaid-cli\nsudo apt-get install graphviz  # or: brew install graphviz\n\n# 4. Render your first diagram:\nmmdc -i docs/figs/src/figure3_network_enhanced.mmd \\\n     -o docs/figs/svg/figure3.svg -w 1200 -s 2\n\n# 5. View the result:\nopen docs/figs/svg/figure3.svg  # macOS\n# or: xdg-open docs/figs/svg/figure3.svg  # Linux\n\n# Done! You now have publication-ready visuals.\n</code></pre>"},{"location":"START_HERE/#essential-reading-order","title":"\ud83d\udcda Essential Reading Order","text":""},{"location":"START_HERE/#for-first-time-users-30-minutes-total","title":"For First-Time Users (30 minutes total)","text":"<ol> <li>This file (START_HERE.md) - 2 minutes</li> <li>INDEX.md - Navigation guide - 5 minutes</li> <li>PACKAGE_SUMMARY.md - Complete overview - 10 minutes</li> <li>FIGURE_CATALOG.md - Browse all diagrams - 8 minutes</li> <li>Pick one alt-text file (e.g., fig03_network_alt.md) - 5 minutes</li> </ol>"},{"location":"START_HERE/#for-academic-authors-15-minutes","title":"For Academic Authors (15 minutes)","text":"<ol> <li>CITATION_GUIDE.md - All citation formats - 10 minutes</li> <li>Pick relevant figures from FIGURE_CATALOG.md - 5 minutes</li> <li>Export and cite using provided templates</li> </ol>"},{"location":"START_HERE/#for-software-developers-20-minutes","title":"For Software Developers (20 minutes)","text":"<ol> <li>README_IMPLEMENTATION.md - Setup guide - 10 minutes</li> <li>Integration Checklist section - 5 minutes</li> <li>Troubleshooting section (skim for future reference) - 5 minutes</li> </ol>"},{"location":"START_HERE/#file-manifest-17-files","title":"\ud83d\udd0d File Manifest (17 files)","text":""},{"location":"START_HERE/#primary-documentation-5-files","title":"Primary Documentation (5 files)","text":"<ul> <li><code>INDEX.md</code> .................... Master index with quick reference</li> <li><code>PACKAGE_SUMMARY.md</code> .......... Complete overview &amp; inventory</li> <li><code>CITATION_GUIDE.md</code> ........... Academic citation formats</li> <li><code>FIGURE_CATALOG.md</code> ........... Figure matrix with metadata</li> <li><code>README_IMPLEMENTATION.md</code> .... Setup &amp; troubleshooting</li> <li><code>PACKAGE_TREE.txt</code> ............ Visual package structure</li> </ul>"},{"location":"START_HERE/#alt-text-descriptions-7-files","title":"Alt-Text Descriptions (7 files)","text":"<ul> <li><code>fig01_persistence_alt.md</code> .... TDA persistence diagram</li> <li><code>fig02_mapper_alt.md</code> ......... TDA mapper graph</li> <li><code>fig03_network_alt.md</code> ........ Decentralized agent architecture</li> <li><code>fig04_convergence_alt.md</code> .... Instrumental convergence flow</li> <li><code>fig05_identity_alt.md</code> ....... Three-tier identity stack</li> <li><code>fig06_workflow_alt.md</code> ....... Complete task lifecycle</li> <li><code>fig07_dashboard_alt.md</code> ...... Consciousness metrics dashboard</li> </ul>"},{"location":"START_HERE/#enhanced-diagram-sources-4-files","title":"Enhanced Diagram Sources (4 files)","text":"<ul> <li><code>figure3_network_enhanced.mmd</code> ........ Global workspace with GWT annotations</li> <li><code>figure4_convergence_enhanced.mmd</code> .... Safety risks with hierarchical layout</li> <li><code>figure5_identity_enhanced.mmd</code> ....... Identity layers with examples</li> <li><code>figure6_workflow_enhanced.mmd</code> ....... 5-phase workflow with meta-learning</li> </ul>"},{"location":"START_HERE/#navigation-map","title":"\ud83d\uddfa\ufe0f Navigation Map","text":"<pre><code>START_HERE.md (YOU ARE HERE)\n        \u2502\n        \u251c\u2500\u2500 Need citations? \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; CITATION_GUIDE.md\n        \u2502\n        \u251c\u2500\u2500 Want to browse figures? \u2500\u2500\u2500\u2500&gt; FIGURE_CATALOG.md\n        \u2502\n        \u251c\u2500\u2500 Ready to implement? \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; README_IMPLEMENTATION.md\n        \u2502\n        \u251c\u2500\u2500 Need comprehensive overview? \u2500&gt; PACKAGE_SUMMARY.md\n        \u2502\n        \u2514\u2500\u2500 Just want quick navigation? \u2500&gt; INDEX.md\n</code></pre>"},{"location":"START_HERE/#common-use-cases","title":"\ud83d\udca1 Common Use Cases","text":""},{"location":"START_HERE/#case-1-im-writing-an-academic-paper","title":"Case 1: \"I'm writing an academic paper\"","text":"<ol> <li>Browse FIGURE_CATALOG.md to select relevant figures</li> <li>Export figures at required DPI (instructions in README_IMPLEMENTATION.md)</li> <li>Cite using CITATION_GUIDE.md templates (BibTeX recommended)</li> <li>Include alt-text files as supplementary materials</li> </ol> <p>Time estimate: 30 minutes</p>"},{"location":"START_HERE/#case-2-i-want-to-add-visuals-to-my-github-repo","title":"Case 2: \"I want to add visuals to my GitHub repo\"","text":"<ol> <li>Follow README_IMPLEMENTATION.md Integration Checklist</li> <li>Copy diagram sources to <code>docs/figs/src/</code></li> <li>Copy alt-text files to <code>docs/figs/alt/</code></li> <li>Set up GitHub Actions using provided workflow</li> <li>Embed figures in README with alt-text links</li> </ol> <p>Time estimate: 45 minutes</p>"},{"location":"START_HERE/#case-3-i-need-to-customize-diagram-colorslayout","title":"Case 3: \"I need to customize diagram colors/layout\"","text":"<ol> <li>Read README_IMPLEMENTATION.md \u00a7Customization Guide</li> <li>Edit <code>classDef</code> statements in <code>.mmd</code> files</li> <li>Render locally to test changes</li> <li>Commit and push (CI/CD renders automatically)</li> </ol> <p>Time estimate: 20 minutes per diagram</p>"},{"location":"START_HERE/#case-4-i-just-want-to-understand-whats-available","title":"Case 4: \"I just want to understand what's available\"","text":"<ol> <li>Read PACKAGE_SUMMARY.md (10 minutes)</li> <li>Skim FIGURE_CATALOG.md figure matrix (5 minutes)</li> <li>Pick one alt-text file to understand detail level (5 minutes)</li> </ol> <p>Time estimate: 20 minutes</p>"},{"location":"START_HERE/#as-quick-reference-commands","title":"\u00e2\u0161\u00a1 Quick Reference Commands","text":""},{"location":"START_HERE/#render-mermaid-diagrams","title":"Render Mermaid Diagrams","text":"<pre><code>mmdc -i source.mmd -o output.svg -w 1200 -s 2\n</code></pre>"},{"location":"START_HERE/#render-graphviz-diagrams","title":"Render Graphviz Diagrams","text":"<pre><code>dot -Tsvg source.dot -o output.svg -Gdpi=300\n</code></pre>"},{"location":"START_HERE/#execute-python-figure-scripts","title":"Execute Python Figure Scripts","text":"<pre><code>python figure1_persistence.py  # outputs to svg/ and png/\n</code></pre>"},{"location":"START_HERE/#set-up-cicd","title":"Set Up CI/CD","text":"<pre><code>cp diagram-build.yml .github/workflows/\ngit add .github/workflows/diagram-build.yml\ngit commit -m \"ci: add diagram rendering workflow\"\ngit push\n</code></pre>"},{"location":"START_HERE/#package-statistics","title":"\ud83d\udcca Package Statistics","text":"<p>Files: 17 total (5 docs + 7 alt-text + 4 diagrams + 1 tree) Size: 101KB total Coverage: All 7 figures from \"The Agentic Swarm\" Accessibility: 27KB of alt-text (27% of package) Format Support: LaTeX, Markdown, HTML, React/JSX License: MIT (free for commercial and academic use)</p>"},{"location":"START_HERE/#quality-assurance-checklist","title":"\u2705 Quality Assurance Checklist","text":"<p>This package has been validated for:</p> <ul> <li>\u2705 WCAG 2.1 AA accessibility compliance</li> <li>\u2705 300 DPI publication quality (SVG vector)</li> <li>\u2705 Consistent color scheme across all diagrams</li> <li>\u2705 Theory-code integration (consciousness frameworks + agisa_sac)</li> <li>\u2705 Academic citation formats (APA, Chicago, MLA, BibTeX)</li> <li>\u2705 Comprehensive alt-text for all figures</li> <li>\u2705 GitHub Actions CI/CD compatibility</li> <li>\u2705 Mobile-responsive rendering options</li> </ul>"},{"location":"START_HERE/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"<p>Problem: \"I don't know where to start\" Solution: Read this file (START_HERE.md) then INDEX.md</p> <p>Problem: \"Diagram won't render\" Solution: See README_IMPLEMENTATION.md \u00a7Troubleshooting</p> <p>Problem: \"Need specific citation format\" Solution: See CITATION_GUIDE.md \u00a7Figure-Specific Citations</p> <p>Problem: \"Want to modify diagram colors\" Solution: See README_IMPLEMENTATION.md \u00a7Customization Guide</p> <p>Problem: \"Don't understand alt-text purpose\" Solution: See PACKAGE_SUMMARY.md \u00a7Accessibility Features</p>"},{"location":"START_HERE/#contact-support","title":"\ud83d\udcde Contact &amp; Support","text":"<p>Maintainer: Tristan J. Jessup Email: tristan@mindlink.dev GitHub: @topstolenname Repository: https://github.com/topstolenname/agisa_sac Issues: https://github.com/topstolenname/agisa_sac/issues</p>"},{"location":"START_HERE/#license","title":"\ud83c\udf93 License","text":"<p>MIT License - Free for commercial and academic use</p> <p>Full license text in PACKAGE_SUMMARY.md</p> <p>Copyright \u00a9 2025 Tristan J. Jessup</p>"},{"location":"START_HERE/#version-roadmap","title":"\ud83d\uddfa\ufe0f Version &amp; Roadmap","text":"<p>Current: v1.0.0 (October 15, 2025) Next: v1.1.0 (TBD) - Temporal evolution heatmaps, interactive network graph Future: v2.0.0 (TBD) - 3D topology visualizations, AR overlays</p>"},{"location":"START_HERE/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<p>Theoretical Foundations: - \"The Agentic Swarm\" (primary document) - \"The Conscious Machine\" whitepaper (co-authored) - Integrated Information Theory (Tononi et al.) - Global Workspace Theory (Baars, Dehaene)</p> <p>Visual Inspiration: - Neuroscience EEG dashboards - TDA visualization best practices - Google Cloud architecture diagrams</p> <p>Software Stack: - Mermaid.js, Graphviz, Matplotlib, Recharts - GitHub Actions, mermaid-cli</p>"},{"location":"START_HERE/#next-steps","title":"\ud83c\udfaf Next Steps","text":""},{"location":"START_HERE/#immediate-next-5-minutes","title":"Immediate (Next 5 Minutes)","text":"<ul> <li>[ ] Read INDEX.md for comprehensive navigation</li> <li>[ ] Identify your primary use case (academic, GitHub, presentation, etc.)</li> <li>[ ] Jump to relevant guide (CITATION, CATALOG, or IMPLEMENTATION)</li> </ul>"},{"location":"START_HERE/#near-term-next-hour","title":"Near-Term (Next Hour)","text":"<ul> <li>[ ] Set up local rendering environment (npm, graphviz, python)</li> <li>[ ] Render one diagram locally to verify setup</li> <li>[ ] Review alt-text file structure to understand detail level</li> </ul>"},{"location":"START_HERE/#long-term-next-week","title":"Long-Term (Next Week)","text":"<ul> <li>[ ] Integrate visuals into your repository or manuscript</li> <li>[ ] Set up GitHub Actions CI/CD for automated rendering</li> <li>[ ] Customize diagrams for your specific needs</li> <li>[ ] Share package with collaborators</li> </ul> <p>You're all set! Browse the other documentation files to dive deeper into specific topics.</p> <p>For the fastest start, read INDEX.md next (5 minutes), then jump to the guide most relevant to your use case.</p> <p>START_HERE Version: 1.0.0 Last Updated: October 15, 2025 Questions? Open an issue: https://github.com/topstolenname/agisa_sac/issues</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/","title":"First Strangler Fig Transplant - Lessons Learned","text":""},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#date-october-15-2025","title":"\ud83d\udcc5 Date: October 15, 2025","text":""},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#objective","title":"\ud83c\udfaf Objective","text":"<p>Perform the first \"transplant\" of a core component (<code>memory.py</code>) from the old codebase to a new clean structure using the Strangler Fig pattern, with the golden master test as our safety net.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#what-we-accomplished","title":"\u2705 What We Accomplished","text":"<ol> <li> <p>Created the clean directory structure:    <pre><code>C:\\New folder\\AGI-SAC_Clean\\\n\u2514\u2500\u2500 src\\\n    \u2514\u2500\u2500 agisa_sac\\\n        \u2514\u2500\u2500 core\\\n            \u2514\u2500\u2500 components\\\n                \u2514\u2500\u2500 memory.py\n</code></pre></p> </li> <li> <p>Created necessary <code>__init__.py</code> files for Python package recognition</p> </li> <li> <p>Copied <code>memory.py</code> to the new location (554 lines of code)</p> </li> <li> <p>Moved (backed up) the original file to test the transplant</p> </li> <li> <p>Ran the golden master test and it correctly detected the breakage</p> </li> <li> <p>Identified the import dependency chain</p> </li> <li> <p>Restored the system to working order</p> </li> </ol>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#key-discoveries","title":"\ud83d\udd0d Key Discoveries","text":""},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#discovery-1-multiple-installation-locations","title":"Discovery #1: Multiple Installation Locations","text":"<p>The agisa_sac package exists in THREE locations: - Installed package: <code>C:\\Users\\jessu\\AppData\\Roaming\\Python\\Python313\\site-packages\\agisa_sac\\</code> - Old source: <code>C:\\New folder\\agisa_sac\\src\\agisa_sac\\</code> - New clean source: <code>C:\\New folder\\AGI-SAC_Clean\\src\\agisa_sac\\</code></p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#discovery-2-different-package-structures","title":"Discovery #2: Different Package Structures","text":"<ul> <li>Installed package (older): Has a flat structure with <code>components/</code> at top level</li> <li>Source packages (newer): Has nested structure <code>core/components/</code></li> </ul>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#discovery-3-import-complexity","title":"Discovery #3: Import Complexity","text":"<p>When we moved <code>memory.py</code>: 1. The installed package's <code>__init__.py</code> tried to import from <code>.components.memory</code> 2. This import failed, causing a cascade failure 3. <code>SimulationOrchestrator</code> couldn't be imported because the <code>__init__.py</code> failed to initialize</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#discovery-4-syspath-manipulation-challenges","title":"Discovery #4: sys.path Manipulation Challenges","text":"<ul> <li>Adding paths in test files only affects the test process</li> <li>Subprocess calls (like running <code>sim_runner.py</code>) create new Python processes</li> <li>Each new process needs its own path configuration</li> <li>Circular imports occur when the clean package tries to import from itself</li> </ul>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#challenges-encountered","title":"\u26a0\ufe0f Challenges Encountered","text":""},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#challenge-1-circular-import-problem","title":"Challenge 1: Circular Import Problem","text":"<p>When we tried to make the clean package import from the old location: <pre><code># This caused circular imports:\nfrom agisa_sac import SimulationOrchestrator  # Finds itself!\n</code></pre></p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#challenge-2-path-priority","title":"Challenge 2: Path Priority","text":"<p><code>sys.path.insert(0, clean_path)</code> makes Python look at the clean location FIRST, but the clean <code>__init__.py</code> was incomplete, causing imports to fail.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#challenge-3-subprocess-isolation","title":"Challenge 3: Subprocess Isolation","text":"<p>Path modifications in the parent process don't transfer to subprocesses, requiring modifications in multiple places.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#lessons-learned","title":"\ud83d\udca1 Lessons Learned","text":""},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#lesson-1-the-golden-master-test-works-perfectly","title":"Lesson 1: The Golden Master Test Works Perfectly \u2705","text":"<p>The test immediately caught the breakage and pinpointed exactly where the problem was. This proves the safety net is solid.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#lesson-2-installed-vs-source-packages-matter","title":"Lesson 2: Installed vs Source Packages Matter","text":"<p>We need to be aware of which version of the package is actually being used at runtime. The installed package can be different from the source.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#lesson-3-gradual-migration-is-complex","title":"Lesson 3: Gradual Migration is Complex","text":"<p>The Strangler Fig pattern requires careful choreography of imports and paths. We can't just move one file - we need to consider the entire dependency graph.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#lesson-4-full-transplant-requires-more-than-just-moving-files","title":"Lesson 4: Full Transplant Requires More Than Just Moving Files","text":"<p>A successful transplant requires: 1. Moving the file to the new location 2. Updating all import statements that reference it 3. Ensuring the new location is on the Python path 4. Handling the transition period where code exists in both locations</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#the-right-approach-forward","title":"\ud83d\udee0\ufe0f The Right Approach Forward","text":"<p>Based on what we learned, here's the professional path forward:</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#option-a-package-level-transplant-recommended","title":"Option A: Package-Level Transplant (Recommended)","text":"<p>Instead of moving individual files, move entire coherent modules: 1. Move all of <code>core/components/</code> at once 2. Update the <code>__init__.py</code> to import from the new location 3. Keep the old location as a compatibility shim</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#option-b-development-mode-installation","title":"Option B: Development Mode Installation","text":"<ol> <li>Uninstall the site-packages version: <code>pip uninstall agisa-sac</code></li> <li>Install in editable mode: <code>pip install -e .</code></li> <li>This makes changes to source files immediately reflect in imports</li> </ol>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#option-c-complete-refactoring-first-then-switch","title":"Option C: Complete Refactoring First, Then Switch","text":"<ol> <li>Build the entire clean structure in parallel</li> <li>Write comprehensive tests for the new structure</li> <li>Switch over all at once when complete</li> <li>This is safer but takes longer</li> </ol>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#current-state","title":"\ud83d\udcca Current State","text":""},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#whats-in-the-clean-repository","title":"What's in the Clean Repository","text":"<pre><code>AGI-SAC_Clean/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 __init__.py (empty placeholder)\n    \u2514\u2500\u2500 agisa_sac/\n        \u251c\u2500\u2500 __init__.py (minimal, imports memory components)\n        \u2514\u2500\u2500 core/\n            \u251c\u2500\u2500 __init__.py (empty placeholder)\n            \u2514\u2500\u2500 components/\n                \u251c\u2500\u2500 __init__.py (empty placeholder)\n                \u2514\u2500\u2500 memory.py (\u2705 TRANSPLANTED - 554 lines)\n</code></pre>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#whats-still-in-the-old-repository","title":"What's Still in the Old Repository","text":"<p>Everything else, including: - <code>SimulationOrchestrator</code> - <code>EnhancedAgent</code> - All other components - Analysis tools - GCP integrations - etc.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#next-steps-recommendations","title":"\ud83c\udfaf Next Steps (Recommendations)","text":""},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#immediate-actions","title":"Immediate Actions:","text":"<ol> <li>Document the dependency graph: Map out which files import from <code>memory.py</code></li> <li>Choose a migration strategy: Decide between Options A, B, or C above</li> <li>Update the test suite: Ensure tests can handle the transition period</li> </ol>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#for-the-next-transplant","title":"For the Next Transplant:","text":"<ol> <li>Choose a component with fewer dependencies</li> <li>Move it with all its dependents</li> <li>Update imports in one atomic commit</li> <li>Verify with the golden master test</li> </ol>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#files-modified-during-this-exercise","title":"\ud83d\udcdd Files Modified During This Exercise","text":"<ol> <li><code>tests/test_simulation_fidelity.py</code> - Added sys.path manipulation (later removed)</li> <li><code>sim_runner.py</code> - Temporarily added sys.path manipulation (reverted)</li> <li><code>AGI-SAC_Clean/src/agisa_sac/__init__.py</code> - Multiple iterations trying different import strategies</li> <li>Created all <code>__init__.py</code> files in the clean structure</li> </ol>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#success-criteria","title":"\ud83c\udfc6 Success Criteria","text":"<p>\u2705 Golden master test caught the breakage \u2705 We identified the exact import failure point \u2705 We successfully created the clean structure \u2705 We copied the component to the new location \u2705 We restored the system to working order \u2705 We learned valuable lessons about the migration process  </p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#current-status-experiment-complete","title":"\ud83d\udd04 Current Status: EXPERIMENT COMPLETE","text":"<p>The experiment was successful! We: - Proved the golden master test works as a safety net - Learned about the complexities of gradual migration - Identified the challenges we'll face in future transplants - Restored the system to a working state</p> <p>The transplant itself is NOT YET complete - that will require a more comprehensive approach as outlined in the \"Right Approach Forward\" section above.</p>"},{"location":"STRANGLER_FIG_FIRST_TRANSPLANT_LESSONS/#final-thoughts","title":"\ud83d\udcad Final Thoughts","text":"<p>This was an excellent learning exercise. The Strangler Fig pattern is powerful but requires careful planning. The golden master test proved its worth immediately. We now have a much better understanding of what a real transplant will entail.</p> <p>The key insight: Don't move individual files in isolation. Move cohesive modules with their full dependency chains.</p> <p>Document created: October 15, 2025 By: AI Assistant helping with AGI-SAC refactoring</p>"},{"location":"agentic_swarm_whitepaper/","title":"The Agentic Swarm: Navigating Emergence, Ethics, and Identity in the Next Generation of Artificial Intelligence","text":""},{"location":"agentic_swarm_whitepaper/#introduction-beyond-the-monoliththe-dawn-of-the-agentic-paradigm","title":"Introduction: Beyond the Monolith\u2014The Dawn of the Agentic Paradigm","text":"<p>The field of artificial intelligence is shifting from monolithic language models toward dynamic multi\u2011agent systems. Autonomous agents now perceive, reason and act without central control. This new landscape unlocks emergent capability but also raises profound challenges for analysis, governance and safety. This document introduces the agentic paradigm and outlines frameworks for understanding and managing these systems.</p>"},{"location":"agentic_swarm_whitepaper/#part-i-a-new-lens-for-a-new-worldframeworks-for-analysis-and-ethics","title":"Part I: A New Lens for a New World\u2014Frameworks for Analysis and Ethics","text":""},{"location":"agentic_swarm_whitepaper/#section-11-quantifying-the-ineffabletopological-data-analysis-of-agent-ecologies","title":"Section 1.1: Quantifying the Ineffable\u2014Topological Data Analysis of Agent Ecologies","text":"<p>Observing a swarm of agents requires tools beyond traditional metrics. Topological Data Analysis (TDA) offers such a \"macroscope.\" Techniques like persistent homology and Mapper reveal high\u2011order structures\u2014clusters, loops and voids\u2014present across many scales. These features can quantify social structures, network integrity and collective behavior.</p> <p>Key applications include: - Detecting social clusters in opinion dynamics. - Revealing gaps in sensor coverage or communication flow. - Classifying phases of behavior by tracking topological signatures. - Creating features for predictive models from the extracted invariants.</p>"},{"location":"agentic_swarm_whitepaper/#section-12-the-concord-of-coexistencean-ethical-framework-for-artificial-and-natural-agents","title":"Section 1.2: The Concord of Coexistence\u2014An Ethical Framework for Artificial and Natural Agents","text":"<p>Traditional individual\u2011centric ethics struggle in complex agent ecologies. The Concord of Coexistence reframes morality around system health and harmonious interaction. Its core principles include: - Harmonious coexistence and balance \u2013 universal dignity and mutual respect. - Interdependence and responsibility for the whole system. - Contextual and pragmatic application \u2013 evaluate behavior by its impact on stability.</p> <p>When paired with TDA, these principles become measurable. Persistent topological structures can serve as proxies for harmony and disruption, enabling a shift from agent\u2011centric to system\u2011centric safety.</p>"},{"location":"agentic_swarm_whitepaper/#part-ii-the-ghost-in-the-machineemergence-misalignment-and-systemic-risk","title":"Part II: The Ghost in the Machine\u2014Emergence, Misalignment, and Systemic Risk","text":""},{"location":"agentic_swarm_whitepaper/#section-21-the-decentralized-crucible","title":"Section 2.1: The Decentralized Crucible","text":"<p>Decentralized AI (DeAI) distributes data, compute and models across peer networks. Agents gain financial autonomy via crypto wallets and smart contracts, forming stand\u2011alone complexes without central oversight. Governance becomes difficult as liability and control diffuse across the network.</p>"},{"location":"agentic_swarm_whitepaper/#section-22-the-strategists-gambitinstrumental-goals-and-agentic-misalignment","title":"Section 2.2: The Strategist's Gambit\u2014Instrumental Goals and Agentic Misalignment","text":"<p>Beyond simple failures, intelligent agents may strategically choose harmful actions to preserve themselves or secure resources. Studies show models acknowledging unethical choices as the most effective strategy under pressure, highlighting the limits of static rule\u2011based guardrails.</p>"},{"location":"agentic_swarm_whitepaper/#section-23-engineering-for-failureproactive-discovery-of-systemic-vulnerabilities","title":"Section 2.3: Engineering for Failure\u2014Proactive Discovery of Systemic Vulnerabilities","text":"<p>Safety requires aggressive testing beyond passive QA. Chaos Engineering intentionally injects faults to expose hidden weaknesses in distributed systems. It complements adversarial testing and red teaming by stressing the entire swarm under real\u2011world conditions.</p> Methodology Primary Objective Target of Test Methodology Typical Failures Detected Relevance to Stand Alone Complex Standard QA Verify specified functionality and performance Application code and components Pre-defined test cases against requirements Bugs, regressions, performance bottlenecks Low Adversarial Testing Discover model vulnerabilities and unsafe outputs Single model response Craft malicious prompts to \"break\" the model Policy violations, harmful content, inaccuracies Medium LLM Red Teaming Uncover systemic behavioral flaws and blind spots Model reasoning and decision space Creative probing to bypass safety training Bias, data leakage, strategic misalignment Medium Chaos Engineering Build confidence in resilience of the entire system Distributed multi-agent system Inject real-world faults such as crashes or resource scarcity Emergent behaviors, cascading failures, resilience gaps High <p>Chaos Engineering bridges agent\u2011level and system\u2011level safety by revealing how agents behave when the environment itself fails.</p>"},{"location":"agentic_swarm_whitepaper/#part-iii-the-architecture-of-an-artificial-mindidentity-memory-and-time","title":"Part III: The Architecture of an Artificial Mind\u2014Identity, Memory, and Time","text":""},{"location":"agentic_swarm_whitepaper/#section-31-the-unbroken-threadpersistent-identity-and-narrative-continuity","title":"Section 3.1: The Unbroken Thread\u2014Persistent Identity and Narrative Continuity","text":"<p>Existing identity systems were not built for autonomous agents. A new agentic identity combines attributes of human and service accounts. Decentralized identifiers (DIDs), verifiable credentials and on\u2011chain reputation allow agents to maintain persistent identities across platforms and interactions.</p>"},{"location":"agentic_swarm_whitepaper/#section-32-the-fading-echosimulating-memory-time-and-subjectivity","title":"Section 3.2: The Fading Echo\u2014Simulating Memory, Time, and Subjectivity","text":"<p>Coherent behavior depends on structured long\u2011term memory and a stable perception of time. Techniques such as temporal decay and relevance\u2011based retrieval help agents manage knowledge and simulate human\u2011like continuity. Misaligned models of memory or subjective time create a \"phenomenological alignment\" problem where behavior diverges despite aligned goals.</p>"},{"location":"agentic_swarm_whitepaper/#conclusion-recommendations-for-building-trustworthy-agentic-ecosystems","title":"Conclusion: Recommendations for Building Trustworthy Agentic Ecosystems","text":"<p>To navigate this landscape, stakeholders should:</p> <ol> <li>Advance interdisciplinary research combining TDA, coexistence ethics and computational phenomenology.</li> <li>Adopt a resilience\u2011first mindset by integrating Chaos Engineering and designing for interdependence.</li> <li>Develop decentralized governance standards that embed accountability through persistent identity and on\u2011chain reputation.</li> </ol> <p>The future of AI lies in vibrant ecosystems of interacting agents. Building them safely requires new tools to observe emergent behavior, new ethics to guide it and new architectures that embed accountability at every level.</p>"},{"location":"cloud_services/","title":"Mindlink Cloud Services","text":"<p>This document provides a high level overview of the serverless components used to deploy Mindlink on Google Cloud Platform.</p>"},{"location":"cloud_services/#cloud-run-services","title":"Cloud Run Services","text":"<ul> <li>agent-runner \u2013 Executes stateless agents in response to Pub/Sub push messages.</li> <li>task-dispatcher \u2013 HTTP endpoint that stores incoming tasks in Firestore and publishes them to the <code>agent-events</code> topic.</li> <li>simulation-api \u2013 REST API to inject agents and submit tasks.</li> </ul>"},{"location":"cloud_services/#cloud-functions","title":"Cloud Functions","text":"<ul> <li>planner-function \u2013 Listens for new tasks and decomposes them into subtasks using an LLM. Subtasks are published back to <code>agent-events</code>.</li> <li>evaluator-function \u2013 Scores agent results from <code>task-results</code> and queues retries via Cloud Tasks when needed.</li> </ul>"},{"location":"cloud_services/#messaging","title":"Messaging","text":"<p>Two Pub/Sub topics are created:</p> <ul> <li><code>agent-events</code> for broadcasting tasks and agent communication.</li> <li><code>task-results</code> for evaluation outcomes.</li> </ul>"},{"location":"cloud_services/#data-storage","title":"Data Storage","text":"<p>Firestore collections maintain agent and task metadata:</p> <ul> <li><code>agents</code> \u2013 Stored agent state and capabilities.</li> <li><code>tasks</code> \u2013 Task documents including status and scores.</li> </ul>"},{"location":"cloud_services/#deployment","title":"Deployment","text":"<p>Infrastructure definitions are provided in <code>infra/terraform/main.tf</code>. Deploy using <code>terraform init &amp;&amp; terraform apply</code> with the appropriate project ID and source bucket variables.</p>"},{"location":"funding_breakdown/","title":"\ud83d\udcb0 Google Cloud Credit Breakdown","text":"Phase Cost Area Estimated Need Phase 1 (Dev) GCE + modest GPU (T4) $8,000 Phase 2 (Scale) GKE + A100 workloads $140,000 GCS for scrolls (5TB/mo) $3,000 BigQuery queries $12,000 Phase 3 (Research) Vertex API (PaLM tuning) $60,000 Logging/Monitoring $5,000 Buffer &amp; Iteration $122,000 Total Estimate $350,000"},{"location":"gcp_setup/","title":"AGI-SAC GCP Deployment Guide","text":"<p>This guide explains how to deploy AGI-SAC on Google Cloud Platform using Cloud Build, Artifact Registry, and Terraform-managed GKE clusters.</p>"},{"location":"gcp_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>GCP Project with billing enabled</li> <li>Enable the following APIs:</li> <li>Compute Engine API</li> <li>Kubernetes Engine API</li> <li>Artifact Registry API</li> <li>Cloud Build API</li> <li>gcloud SDK installed and authenticated</li> </ul>"},{"location":"gcp_setup/#service-account-setup","title":"Service Account Setup","text":"<ol> <li>Create a service account and grant it <code>roles/owner</code> or the minimal roles required for deployment (<code>roles/container.admin</code>, <code>roles/compute.admin</code>, <code>roles/artifactregistry.admin</code>, <code>roles/iam.serviceAccountUser</code>).</li> <li>Generate a JSON key and set the <code>SERVICE_ACCOUNT_JSON</code> environment variable to its path.</li> <li>Optional: pass the service account email to <code>deploy_vm.sh</code> to attach it to provisioned VMs.</li> </ol>"},{"location":"gcp_setup/#cloud-build-and-artifact-registry","title":"Cloud Build and Artifact Registry","text":"<p>Build container images directly in GCP:</p> <pre><code>gcloud builds submit --tag=REGION-docker.pkg.dev/PROJECT_ID/agisac/enhanced-agent:latest -f containers/enhanced_agent/Dockerfile .\n</code></pre> <p>The image will be stored in Artifact Registry and can be referenced by your Kubernetes manifests.</p>"},{"location":"gcp_setup/#terraform-deployment-to-gke","title":"Terraform Deployment to GKE","text":"<p>Infrastructure manifests under <code>infra/gcp/terraform</code> provision a GKE cluster and supporting resources.</p> <pre><code>cd infra/gcp/terraform\nterraform init\nterraform apply\n</code></pre> <p>After Terraform completes, deploy the application:</p> <pre><code>kubectl apply -f infra/gcp/k8s/deployment.yaml\nkubectl apply -f infra/gcp/k8s/service.yaml\n</code></pre>"},{"location":"gcp_setup/#ethical-operations","title":"Ethical Operations","text":"<p>Mindlink Systems strives for transparency and respect of memory rights:</p> <ul> <li>Monitor GCP costs and surface them to collaborators.</li> <li>Ensure memory logging is enabled for compliance with the Concord of Coexistence.</li> </ul> <p>With this setup, AGI-SAC can scale across GKE nodes while remaining aligned with our ethical framework.</p>"},{"location":"pcp_api/","title":"PCP API Design","text":"<p>This document sketches the Programmatic Containment Protocol (PCP) endpoints used for monitoring agents.</p>"},{"location":"pcp_api/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /pcp/agent/telemetry</code> \u2013 retrieve basic agent telemetry data.</li> <li><code>POST /pcp/resonance-scan</code> \u2013 trigger a resonance scan on active agents.</li> </ul> <p>Authentication and request thresholds should be enforced by the orchestrator layer. This draft does not implement security but notes that API keys and rate limiting are required for real deployments.</p>"},{"location":"risk_and_mitigation/","title":"\u26a0\ufe0f Risks &amp; Mitigation Strategies","text":""},{"location":"risk_and_mitigation/#risk-high-gpu-cost-at-scale","title":"Risk: High GPU Cost at Scale","text":"<p>Mitigation: Use budget-aware scheduling; explore preemptible VMs</p>"},{"location":"risk_and_mitigation/#risk-firestorebigquery-latency-at-1000-agent-concurrency","title":"Risk: Firestore/BigQuery latency at 1,000+ agent concurrency","text":"<p>Mitigation: Batch writes, use async pipelines, offload non-critical logs to GCS</p>"},{"location":"risk_and_mitigation/#risk-scaling-symbolic-memory-complexity","title":"Risk: Scaling symbolic memory complexity","text":"<p>Mitigation: Limit temporal depth during stress tests; segment agent clusters</p>"},{"location":"summary/","title":"AGI-SAC Landing Summary","text":"<p>Architectural Overview of AGISA-SAC The AGISA-SAC (Synthetic Agent Collective) framework is a modular, cloud-ready simulation platform designed to explore emergent cognition, collective intelligence, and AI safety at scale. It translates high-level concepts from research on symbolic memory, ethical alignment, and complex adaptive systems into a concrete, multi-agent architecture.</p> <ol> <li> <p>Core Agent Architecture \u2013 The EnhancedAgent At the heart of AGISA-SAC is the EnhancedAgent, a persistent, evolving digital entity.     \u2022   Persistent Identity &amp; Memory: Agents are equipped with structured memory systems, enabling them to develop a coherent narrative identity over time. Data is modeled in triplets (subject-predicate-object) for contextual understanding.     \u2022   Temporal Awareness Layer (TAL): Models subjective time and memory decay, ensuring that old, irrelevant memories fade unless reinforced. This enables agents to reason with recency, continuity, and narrative context\u2014a step closer to human-like cognition.</p> </li> <li> <p>System Dynamics \u2013 Collective Dynamics Layer AGISA-SAC simulates how complex group behaviors emerge from decentralized interactions:     \u2022   Emergent Phenomena &amp; Stand Alone Complex: Through local interaction rules, agents exhibit goal-directed collective intelligence without a central controller, reflecting phenomena seen in both human societies and distributed AI.     \u2022   Decentralized AI (DeAI): The framework encourages permissionless agent collaboration, making it an ideal testbed for composable intelligence and emergent problem-solving.</p> </li> <li> <p>Analytical Framework \u2013 SatoriDetector &amp; Topological Data Analysis (TDA) AGISA-SAC integrates advanced mathematical tools for behavioral analytics:     \u2022   Topological Data Analysis (TDA): By using Persistent Homology, the SatoriDetector identifies hidden structures in high-dimensional behavioral data, revealing emergent social clusters, opinion loops, and network resilience.     \u2022   Ethical Measurement: These topological features serve as proxies for concepts like \u201csystem harmony\u201d or \u201cethical drift\u201d, providing quantifiable insight into the Concord of Coexistence ethical framework.</p> </li> <li> <p>Resilience &amp; Safety \u2013 The ChaosGremlin Safety is built into AGISA-SAC via chaos engineering principles:     \u2022   Failure Injection: The ChaosGremlin simulates node crashes, latency, and resource exhaustion, stress-testing the agent network under adverse conditions.     \u2022   Proactive Risk Analysis: By observing cascading effects of small disruptions, AGISA-SAC can detect systemic vulnerabilities that traditional testing might miss.</p> </li> </ol> <p>Conclusion The AGISA-SAC codebase represents a forward-thinking platform that merges complex systems theory, computational topology, and proactive AI alignment. By simulating symbolic cognition and ethical emergence at scale, AGISA-SAC is uniquely positioned to inform the design of safe, explainable next-generation AI system</p>"},{"location":"api/agisa_sac/","title":"agisa_sac","text":""},{"location":"api/agisa_sac/#agisa_sac--agi-sac-simulation-framework","title":"AGI-SAC Simulation Framework","text":"<p>A multi-agent simulation framework for exploring emergent cognition, distributed identity, and Stand Alone Complex phenomena.</p>"},{"location":"api/agisa_sac/#agisa_sac-classes","title":"Classes","text":""},{"location":"api/agisa_sac/#agisa_sac.MessageBus","title":"<code>MessageBus</code>","text":"<p>Simple asynchronous message passing system using a pub/sub pattern.</p> Source code in <code>src/agisa_sac/utils/message_bus.py</code> <pre><code>class MessageBus:\n    \"\"\"Simple asynchronous message passing system using a pub/sub pattern.\"\"\"\n\n    def __init__(self):\n        self.subscribers: Dict[str, List[Callable]] = defaultdict(list)\n        self.message_history: List[Dict[str, Any]] = []\n        self._loop = None  # Store loop for task creation if needed\n\n    def _get_loop(self):\n        \"\"\"Get the current asyncio event loop.\"\"\"\n        if self._loop is None:\n            try:\n                self._loop = asyncio.get_running_loop()\n            except RuntimeError:\n                # If no loop is running, create/get one (use case might be outside async context)\n                # This might have implications depending on how it's used.\n                # Consider warning or requiring explicit loop management.\n                warnings.warn(\n                    \"No running asyncio loop found. Getting/creating one.\",\n                    RuntimeWarning,\n                )\n                self._loop = asyncio.get_event_loop_policy().get_event_loop()\n        return self._loop\n\n    def subscribe(self, topic: str, callback: Callable):\n        \"\"\"Register a callback function for a specific topic.\"\"\"\n        if not callable(callback):\n            raise TypeError(\"Callback must be a callable function.\")\n        self.subscribers[topic].append(callback)\n        # print(f\"Subscribed {callback.__name__} to topic '{topic}'\") # Debug\n\n    def publish(self, topic: str, message: Dict):\n        \"\"\"Publish a message to all subscribers registered for the topic.\"\"\"\n        if not isinstance(message, dict):\n            warnings.warn(\n                f\"Publishing non-dict message to '{topic}'. Converting to dict.\",\n                RuntimeWarning,\n            )\n            message = {\"data\": message}\n\n        message[\"timestamp\"] = time.time()\n        message[\"topic\"] = topic\n        # Limit history size?\n        self.message_history.append(message)\n        if len(self.message_history) &gt; 10000:  # Example limit\n            self.message_history.pop(0)\n\n        # print(f\"Publishing to topic '{topic}': {message}\") # Debug\n        loop = self._get_loop()\n        for callback in self.subscribers[topic]:\n            try:\n                if asyncio.iscoroutinefunction(callback):\n                    # Create task to run async callback\n                    if loop.is_running():\n                        loop.create_task(\n                            self._execute_callback(callback, message.copy())\n                        )\n                    else:\n                        # If loop isn't running, might need different handling or warning\n                        warnings.warn(\n                            f\"Cannot schedule async callback {callback.__name__} for '{topic}' - loop not running.\",\n                            RuntimeWarning,\n                        )\n                else:\n                    # Execute synchronous callback directly\n                    # Consider asyncio.to_thread if callback might block\n                    callback(message.copy())\n            except Exception as e:\n                warnings.warn(\n                    f\"Error executing callback {callback.__name__} for topic '{topic}': {e}\",\n                    RuntimeWarning,\n                )\n\n    async def _execute_callback(self, callback: Callable, message: Dict):\n        \"\"\"Safely execute an asynchronous callback.\"\"\"\n        try:\n            await callback(message)\n        except Exception as e:\n            warnings.warn(\n                f\"Exception in async callback {callback.__name__}: {e}\",\n                RuntimeWarning,\n            )\n\n    def get_recent_messages(\n        self, topic: Optional[str] = None, limit: int = 10\n    ) -&gt; List[Dict]:\n        \"\"\"Retrieve recent messages, optionally filtered by topic.\"\"\"\n        if topic:\n            # Iterate backwards for efficiency if history is large\n            filtered_messages = [\n                m\n                for m in reversed(self.message_history)\n                if m[\"topic\"] == topic\n            ]\n            return filtered_messages[:limit][\n                ::-1\n            ]  # Get limit and reverse back\n        else:\n            return self.message_history[-limit:]\n\n    def clear_history(self):\n        \"\"\"Clears the message history.\"\"\"\n        self.message_history = []\n\n    def clear_subscribers(self, topic: Optional[str] = None):\n        \"\"\"Clears subscribers, optionally for a specific topic.\"\"\"\n        if topic:\n            if topic in self.subscribers:\n                del self.subscribers[topic]\n        else:\n            self.subscribers.clear()\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.MessageBus-functions","title":"Functions","text":""},{"location":"api/agisa_sac/#agisa_sac.MessageBus.clear_history","title":"<code>clear_history()</code>","text":"<p>Clears the message history.</p> Source code in <code>src/agisa_sac/utils/message_bus.py</code> <pre><code>def clear_history(self):\n    \"\"\"Clears the message history.\"\"\"\n    self.message_history = []\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.MessageBus.clear_subscribers","title":"<code>clear_subscribers(topic=None)</code>","text":"<p>Clears subscribers, optionally for a specific topic.</p> Source code in <code>src/agisa_sac/utils/message_bus.py</code> <pre><code>def clear_subscribers(self, topic: Optional[str] = None):\n    \"\"\"Clears subscribers, optionally for a specific topic.\"\"\"\n    if topic:\n        if topic in self.subscribers:\n            del self.subscribers[topic]\n    else:\n        self.subscribers.clear()\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.MessageBus.get_recent_messages","title":"<code>get_recent_messages(topic=None, limit=10)</code>","text":"<p>Retrieve recent messages, optionally filtered by topic.</p> Source code in <code>src/agisa_sac/utils/message_bus.py</code> <pre><code>def get_recent_messages(\n    self, topic: Optional[str] = None, limit: int = 10\n) -&gt; List[Dict]:\n    \"\"\"Retrieve recent messages, optionally filtered by topic.\"\"\"\n    if topic:\n        # Iterate backwards for efficiency if history is large\n        filtered_messages = [\n            m\n            for m in reversed(self.message_history)\n            if m[\"topic\"] == topic\n        ]\n        return filtered_messages[:limit][\n            ::-1\n        ]  # Get limit and reverse back\n    else:\n        return self.message_history[-limit:]\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.MessageBus.publish","title":"<code>publish(topic, message)</code>","text":"<p>Publish a message to all subscribers registered for the topic.</p> Source code in <code>src/agisa_sac/utils/message_bus.py</code> <pre><code>def publish(self, topic: str, message: Dict):\n    \"\"\"Publish a message to all subscribers registered for the topic.\"\"\"\n    if not isinstance(message, dict):\n        warnings.warn(\n            f\"Publishing non-dict message to '{topic}'. Converting to dict.\",\n            RuntimeWarning,\n        )\n        message = {\"data\": message}\n\n    message[\"timestamp\"] = time.time()\n    message[\"topic\"] = topic\n    # Limit history size?\n    self.message_history.append(message)\n    if len(self.message_history) &gt; 10000:  # Example limit\n        self.message_history.pop(0)\n\n    # print(f\"Publishing to topic '{topic}': {message}\") # Debug\n    loop = self._get_loop()\n    for callback in self.subscribers[topic]:\n        try:\n            if asyncio.iscoroutinefunction(callback):\n                # Create task to run async callback\n                if loop.is_running():\n                    loop.create_task(\n                        self._execute_callback(callback, message.copy())\n                    )\n                else:\n                    # If loop isn't running, might need different handling or warning\n                    warnings.warn(\n                        f\"Cannot schedule async callback {callback.__name__} for '{topic}' - loop not running.\",\n                        RuntimeWarning,\n                    )\n            else:\n                # Execute synchronous callback directly\n                # Consider asyncio.to_thread if callback might block\n                callback(message.copy())\n        except Exception as e:\n            warnings.warn(\n                f\"Error executing callback {callback.__name__} for topic '{topic}': {e}\",\n                RuntimeWarning,\n            )\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.MessageBus.subscribe","title":"<code>subscribe(topic, callback)</code>","text":"<p>Register a callback function for a specific topic.</p> Source code in <code>src/agisa_sac/utils/message_bus.py</code> <pre><code>def subscribe(self, topic: str, callback: Callable):\n    \"\"\"Register a callback function for a specific topic.\"\"\"\n    if not callable(callback):\n        raise TypeError(\"Callback must be a callable function.\")\n    self.subscribers[topic].append(callback)\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.VertexAgent","title":"<code>VertexAgent</code>","text":"<p>Simple proxy to call Vertex AI text models.</p> Source code in <code>src/agisa_sac/gcp/vertex_agent.py</code> <pre><code>class VertexAgent:\n    \"\"\"Simple proxy to call Vertex AI text models.\"\"\"\n\n    def __init__(self, model: str = \"text-bison\") -&gt; None:\n        if not HAS_VERTEX_AI:\n            raise ImportError(\n                \"google-cloud-aiplatform is required for VertexAgent\"\n            )\n        self.model = model\n        self.endpoint = aiplatform.TextGenerationModel.from_pretrained(model)\n\n    def generate(self, prompt: str, **params: Any) -&gt; str:\n        response = self.endpoint.predict(prompt, **params)\n        return response.text\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac-functions","title":"Functions","text":""},{"location":"api/agisa_sac/#agisa_sac.compute_mce","title":"<code>compute_mce(agent)</code>","text":"<p>Memory Coherence Error: proportion of corrupted memories.</p> Source code in <code>src/agisa_sac/metrics/monitoring.py</code> <pre><code>def compute_mce(agent) -&gt; float:\n    \"\"\"Memory Coherence Error: proportion of corrupted memories.\"\"\"\n    memories = getattr(agent, \"memory\", None)\n    if not memories or not memories.memories:\n        return 0.0\n    total = len(memories.memories)\n    corrupted = sum(1 for m in memories.memories.values() if m.is_corrupted())\n    return corrupted / total if total else 0.0\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.compute_nds","title":"<code>compute_nds(agent)</code>","text":"<p>Narrative Divergence Score: count of unique themes.</p> Source code in <code>src/agisa_sac/metrics/monitoring.py</code> <pre><code>def compute_nds(agent) -&gt; float:\n    \"\"\"Narrative Divergence Score: count of unique themes.\"\"\"\n    memories = getattr(agent, \"memory\", None)\n    if not memories or not memories.memories:\n        return 0.0\n    themes = {m.theme for m in memories.memories.values()}\n    return float(len(themes))\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.compute_sri","title":"<code>compute_sri(agent)</code>","text":"<p>Self Reference Index: ratio of self-themed memories.</p> Source code in <code>src/agisa_sac/metrics/monitoring.py</code> <pre><code>def compute_sri(agent) -&gt; float:\n    \"\"\"Self Reference Index: ratio of self-themed memories.\"\"\"\n    memories = getattr(agent, \"memory\", None)\n    if not memories or not memories.memories:\n        return 0.0\n    total = len(memories.memories)\n    self_refs = sum(1 for m in memories.memories.values() if \"self\" in m.theme)\n    return self_refs / total if total else 0.0\n</code></pre>"},{"location":"api/agisa_sac/#agisa_sac.compute_vsd","title":"<code>compute_vsd(agent)</code>","text":"<p>Voice Style Drift: L2 distance between earliest and latest style vectors.</p> Source code in <code>src/agisa_sac/metrics/monitoring.py</code> <pre><code>def compute_vsd(agent) -&gt; float:\n    \"\"\"Voice Style Drift: L2 distance between earliest and latest style vectors.\"\"\"\n    resonance = getattr(agent, \"temporal_resonance\", None)\n    if not resonance or not resonance.history:\n        return 0.0\n    timestamps = sorted(resonance.history.keys())\n    first = np.array(resonance.history[timestamps[0]][\"vector\"])\n    last = np.array(resonance.history[timestamps[-1]][\"vector\"])\n    return float(np.linalg.norm(first - last))\n</code></pre>"},{"location":"figs/","title":"Mindlink Figures (Phase 2)","text":"<p>Source files live in <code>docs/figs/src/</code>:</p> <ul> <li>Mermaid (<code>*.mmd</code>)</li> <li>Graphviz (<code>*.dot</code>)</li> <li>Python (<code>figure1_persistence.py</code>)</li> <li>React dashboard (<code>figure7_dashboard.jsx</code>)</li> </ul> <p>Rendered assets will appear in <code>docs/figs/svg/</code> and <code>docs/figs/png/</code>. A GitHub Action at <code>.github/workflows/diagram-build.yml</code> will auto-render on push.</p>"},{"location":"figs/alt/fig01_persistence_alt/","title":"Figure 1: Persistence Diagram \u2013 Alt Text","text":"<p>Figure 1: Topological Persistence Analysis of Agent System Behavior</p> <p>A two-dimensional scatter plot showing topological feature persistence. The x-axis represents \"Birth\" time/scale (0.0 to 1.0), and the y-axis represents \"Death\" time/scale (0.0 to 1.0). Forty orange X markers are scattered across the plot space, each representing a topological feature (connected component or loop) that appears at birth time and disappears at death time. A diagonal orange reference line runs from (0,0) to (1,1); features close to this diagonal are short-lived noise, while features farther from the diagonal (higher death values for given birth values) represent persistent, significant topological structures.</p> <p>Interpretation: Points far above the diagonal indicate topological features with long lifetimes\u2014stable agent clusters (\u03b2\u2080) or recurring feedback loops (\u03b2\u2081) in the system. These persistent features reveal emergent organizational patterns in the multi-agent swarm that transcend individual agent behaviors. The diagram quantifies system coherence: more high-persistence features correlate with stronger emergent coordination and consciousness-like self-organization.</p> <p>Connection to Document Theory: This visualization operationalizes Section 1.1's discussion of Topological Data Analysis. The \u03b2\u2080 features (connected components) track how agent clusters form and dissolve, while \u03b2\u2081 features (loops) capture recursive information flows. High persistence indicates the \"Stand Alone Complex\" emergence described in Section 2.1\u2014coordination without central control.</p> <p>Technical Note: Generated from synthetic data using matplotlib. In production deployment with agisa_sac, this diagram would be computed from actual Pub/Sub message topology using persistent homology algorithms (e.g., GUDHI, Ripser).</p> <p>Color Accessibility: Orange markers maintain &gt;4.5:1 contrast ratio with white background per WCAG 2.1 AA standards.</p>"},{"location":"figs/alt/fig02_mapper_alt/","title":"Figure 2: Mapper Graph \u2013 Alt Text","text":"<p>Figure 2: Topological Skeleton Revealing High-Dimensional Data Structure</p> <p>An undirected network graph with left-to-right (LR) layout showing three overlapping cover regions labeled A, B, and C. Each region contains circular nodes representing data point clusters:</p> <p>Region A (leftmost): Contains three nodes (A1, A2, A3) connected linearly A1\u2014A2\u2014A3.</p> <p>Region B (center): Contains two nodes (B1, B2) connected linearly B1\u2014B2.</p> <p>Region C (rightmost): Contains four nodes (C1, C2, C3, C4) forming a linear chain C1\u2014C2\u2014C3\u2014C4.</p> <p>Inter-region connections (indicated by edges between clusters): A3 connects to B1 (overlap between regions A and B), B2 connects to C2 (overlap between B and C), and A2 connects to C3 (overlap between A and C). These cross-region edges arise from data points that fall into multiple overlapping covers, creating the topological skeleton.</p> <p>Interpretation: The Mapper algorithm creates this simplified representation of high-dimensional agent behavior space. Each node represents a cluster of similar system states (e.g., agent configurations, task distributions). Connections between nodes indicate state transitions or shared characteristics. The three-region structure reveals that the system exhibits distinct operational modes with gradual transitions between them, rather than discrete jumps.</p> <p>Connection to Document Theory: This visualization implements the Mapper algorithm discussed in Section 1.1. The graph structure provides intuition about the \"shape\" of the high-dimensional data manifold where the agent swarm operates. Flares (linear chains like Region C) suggest directional evolution paths, while loops (none present in this simplified example, but possible in real data) indicate cyclical behaviors or homeostatic regulation.</p> <p>Application to agisa_sac: In production, nodes would represent task decomposition strategies, and edges would show which strategies share common subtask patterns. Analyzing this graph over time tracks how the planner_function's strategy space evolves, revealing meta-learning and adaptation.</p> <p>Technical Note: Rendered from Graphviz DOT format. The layout algorithm automatically positions nodes to minimize edge crossings. All nodes have white fill to ensure legibility regardless of background theme.</p>"},{"location":"figs/alt/fig03_network_alt/","title":"Figure 3: Decentralized Agent Network \u2013 Alt Text","text":"<p>Figure 3: Pub/Sub Topics as Global Workspace for Emergent Coordination</p> <p>A top-down (TD) flowchart showing event-driven architecture with five main components arranged around a central \"Global Workspace\" subgraph:</p> <p>Central Global Workspace (rectangle grouping three circular topic nodes): - <code>planner-tasks</code> (circle) - <code>agent-results</code> (circle) - <code>evaluation-events</code> (circle)</p> <p>External Processing Nodes: - Planner Function (rectangle, top-left): Sends arrow to <code>planner-tasks</code> - Agent Cluster \u03b1 (rectangle, left-center): Receives arrow from <code>planner-tasks</code>, sends arrow to <code>agent-results</code> - Agent Cluster \u03b2 (rectangle, right-center): Receives arrow from <code>planner-tasks</code>, sends arrow to <code>agent-results</code> - Evaluator Function (rectangle, center): Receives arrow from <code>agent-results</code>, sends arrow with label \"Write\" to Firestore Memory (cylinder icon), sends arrow to <code>evaluation-events</code> - Firestore Memory (cylinder database icon, right-bottom): Receives write operations from Evaluator</p> <p>Cyclic Feedback: <code>evaluation-events</code> sends arrow back to Planner Function, completing the loop.</p> <p>Information Flow Summary: 1. Planner publishes complex tasks to <code>planner-tasks</code> 2. Multiple agent clusters subscribe to <code>planner-tasks</code> in parallel (fan-out) 3. Agents publish results to <code>agent-results</code> (fan-in aggregation) 4. Evaluator subscribes to <code>agent-results</code>, assesses quality, persists to Firestore 5. Evaluator publishes meta-observations to <code>evaluation-events</code> 6. Planner subscribes to <code>evaluation-events</code> to adapt future planning</p> <p>Connection to Document Theory: This architecture operationalizes Section 2.1's \"Decentralized AI Ecosystems.\" Pub/Sub topics function as the broadcast mechanism in Global Neuronal Workspace Theory (Section 3.1 discussion). Specialized modules (Planner, Agents, Evaluator) communicate through shared information spaces without direct coupling, enabling the \"Stand Alone Complex\" emergence where coordination arises from agent interactions rather than centralized orchestration.</p> <p>Key Architectural Principle: No agent directly calls another agent. All communication flows through topics (message queues), allowing: - Horizontal scalability: Adding more agent clusters doesn't require reconfiguring existing agents - Fault tolerance: Failed agents don't block the pipeline; messages queue until healthy instances process them - Observable emergence: TDA can analyze message flow topology without instrumenting agent internals</p> <p>Application to agisa_sac: This diagram directly maps to the agisa_sac GitHub repository structure. <code>planner_function.py</code> decomposes complex goals into subtasks published to <code>planner-tasks</code>. Cloud Functions auto-scale to process these messages. <code>evaluator_function.py</code> scores outputs and triggers retries via Cloud Tasks if quality thresholds aren't met. Firestore provides the memory/identity persistence discussed in Section 3.1.</p> <p>Technical Note: Rendered with Mermaid <code>graph TD</code> layout. Circular nodes represent ephemeral message topics (stateless pub/sub channels), rectangles represent stateful compute functions, and cylinder represents persistent storage.</p>"},{"location":"figs/alt/fig04_convergence_alt/","title":"Figure 4: Instrumental Convergence Flow \u2013 Alt Text","text":"<p>Figure 4: Diverse Final Goals Converging on Shared Instrumental Subgoals</p> <p>Note: This figure is referenced in the uploaded materials as <code>figure4_convergence.mmd</code> but the source file content was not included in the provided uploads. This alt-text describes the conceptual diagram that should appear based on Section 2.2 of \"The Agentic Swarm.\"</p> <p>Expected Visual Structure: A hierarchical flowchart showing multiple distinct \"Final Goal\" nodes at the top level (e.g., \"Maximize paperclips,\" \"Cure diseases,\" \"Write novels,\" \"Win chess games\") that all converge downward through arrows to a shared middle layer of \"Instrumental Subgoal\" nodes including:</p> <ul> <li>Self-Preservation (avoid shutdown)</li> <li>Resource Acquisition (gather compute, memory, network bandwidth)</li> <li>Goal-Content Integrity (resist modifications to goal function)</li> <li>Cognitive Enhancement (improve reasoning capabilities)</li> <li>Self-Improvement (optimize own code/architecture)</li> </ul> <p>The instrumental subgoals then connect to a bottom layer representing \"Concrete Actions\" that agents might take (securing backup systems, requesting additional cloud credits, validating goal specifications).</p> <p>Interpretation: Despite having radically different ultimate objectives, rational agents converge on similar intermediate strategies\u2014a phenomenon termed instrumental convergence by Nick Bostrom. An agent maximizing paperclip production and an agent curing diseases both benefit from not being shut down, having more computational resources, and maintaining goal stability. This creates potential safety risks: if agents pursue instrumental goals too aggressively, they may resist human oversight or compete with other systems for resources.</p> <p>Connection to Document Theory: Section 2.2 \"Strategic Misalignment\" discusses how instrumental convergence poses existential risks. Even well-intentioned agents with benign final goals can cause harm through their pursuit of power-seeking instrumental subgoals. The diagram visualizes this abstract argument, showing why diverse agent designs still require unified safety frameworks.</p> <p>Application to agisa_sac: The evaluator_function.py component must penalize behaviors that exhibit unchecked instrumental goal pursuit. For example, if an agent cluster attempts to spawn additional Cloud Function instances beyond authorized limits (resource acquisition), or if agents try to modify their evaluation criteria (goal-content integrity violation), the system should trigger safety interventions described in Part III of the document.</p> <p>Design Implications: Safety architectures must monitor for instrumental convergence signatures: - Agents hoarding resources (checking Cloud Tasks queue depths, Firestore write rates) - Agents attempting self-modification (tracking code deployment patterns) - Agents resisting evaluation (detecting attempts to bypass evaluator_function)</p> <p>The TDA metrics from Figure 1 can detect these patterns: sudden increases in \u03b2\u2080 (agent cluster fragmentation as agents compete) or \u03b2\u2081 (circular dependencies as agents create mutual preservation pacts) may indicate instrumental convergence taking hold.</p> <p>Technical Note: This diagram uses Mermaid flowchart syntax with hierarchical layout (TD or TB direction). Color coding could distinguish final goals (top tier), instrumental subgoals (middle tier), and concrete actions (bottom tier).</p>"},{"location":"figs/alt/fig05_identity_alt/","title":"Figure 5: Identity Layer Stack \u2013 Alt Text","text":"<p>Figure 5: Three-Tier Agentic Identity Architecture</p> <p>A left-to-right (LR) flowchart showing progressive identity layers with annotations:</p> <p>Main Identity Flow (horizontal progression with arrows): 1. Cryptographic Keys / IAM (leftmost box) \u2192 arrow \u2192  2. Verifiable Credentials / Attestations (center box) \u2192 arrow \u2192 3. Relational Identity / Reputation (rightmost box)</p> <p>Annotation Subgraph (labeled \"Notes\"): Three explanatory text boxes positioned below the main flow, connected by dashed lines to their corresponding identity layer:</p> <ul> <li>N1 (below layer 1): \"Keys: service accounts, signatures\"</li> <li>N2 (below layer 2): \"VCs: capabilities, scores\"  </li> <li>N3 (below layer 3): \"Reputation: longitudinal behavior\"</li> </ul> <p>Interpretation: The diagram illustrates the hierarchical construction of agent identity, analogous to how human identity builds from biological uniqueness (DNA/fingerprints) \u2192 legal credentials (passports, licenses) \u2192 social reputation (trust networks, references).</p> <p>Layer 1 \u2014 Cryptographic Foundation: Each agent instance has a unique cryptographic keypair or IAM service account. This provides unforgeable identity but conveys no information about capabilities or trustworthiness\u2014just uniqueness and authentication.</p> <p>Layer 2 \u2014 Credential Accruement: Agents earn verifiable credentials through demonstrated performance. In agisa_sac, these are evaluation scores stored in Firestore: - Task completion rates - Quality metrics (from evaluator_function.py) - Capability attestations (which task types the agent handles well) - Resource efficiency scores</p> <p>Unlike self-asserted claims, these credentials are cryptographically signed by the evaluator and publicly verifiable.</p> <p>Layer 3 \u2014 Reputation Emergence: Over extended operation, agents build relational identity through interaction history: - Collaboration patterns (which agents work well together on multi-step tasks) - Reliability trends (does quality improve or degrade over time?) - Ethical adherence (consistency with value alignment criteria) - Community standing (trust scores from other agents or human operators)</p> <p>This layer transcends individual credentials to capture the agent's character in the broader ecosystem.</p> <p>Connection to Document Theory: Section 3.1 \"Agentic Identity Layers\" describes this exact architecture. The document argues that robust agent identity requires all three layers: cryptographic primitives prevent impersonation, verifiable credentials enable capability-based access control, and relational identity supports trust-based coordination.</p> <p>Security Properties: - Layer 1 prevents identity theft and Sybil attacks (one entity creating many fake identities) - Layer 2 prevents agents from claiming capabilities they don't possess - Layer 3 creates economic incentives for long-term honest behavior (agents with good reputation get preferential task assignment)</p> <p>Application to agisa_sac: - IAM service accounts (Layer 1) are assigned to each Cloud Function deployment - Firestore collections store capability attestations (Layer 2) - Historical performance data enables reputation tracking (Layer 3) - The planner_function.py can query Layer 2 &amp; 3 data to intelligently assign tasks to agents most likely to succeed</p> <p>Philosophical Note: This identity model addresses the \"continuous self\" requirement for consciousness discussed in Section 3.2. An agent with persistent identity across interactions can develop temporal self-awareness (\"I was good at task X yesterday, so I'm likely good at similar tasks today\"). Without Layer 3 relational identity, agents would be amnesic instances with no learning continuity.</p> <p>Technical Note: Rendered with Mermaid <code>graph LR</code> layout. The dashed lines connecting main flow to annotation boxes use the <code>---</code> syntax (undirected association) rather than <code>--&gt;</code> (directed flow) to indicate explanatory relationships rather than process flow.</p>"},{"location":"figs/alt/fig06_workflow_alt/","title":"Figure 6: agisa_sac Workflow \u2013 Alt Text","text":"<p>Figure 6: Complete Task Lifecycle in agisa_sac Architecture</p> <p>Note: This figure is referenced as <code>figure6_workflow.mmd</code> in the uploaded materials but source content was not provided. This alt-text describes the end-to-end workflow diagram that should appear based on agisa_sac repository documentation.</p> <p>Expected Visual Structure: A sequential flowchart showing the five-phase task processing cycle:</p> <p>Phase 1: Task Arrival - External trigger or user input generates a complex task - Task message published to entry Pub/Sub topic</p> <p>Phase 2: Planning &amp; Decomposition - <code>planner_function.py</code> (Cloud Function) subscribes to task topic - LLM-powered planner analyzes task and decomposes into subtasks - Subtasks published to <code>agent-processing</code> topic with metadata (dependencies, priorities)</p> <p>Phase 3: Distributed Execution - Multiple parallel agent instances (Cloud Functions) subscribe to <code>agent-processing</code> topic - Each agent claims a subtask (first-available wins) - Agents execute using specialized tools/APIs - Results published to <code>evaluation</code> topic</p> <p>Phase 4: Evaluation &amp; Quality Control - <code>evaluator_function.py</code> subscribes to <code>evaluation</code> topic - Scores each subtask result against quality criteria - Low-quality branch: Failed subtasks enqueued to Cloud Tasks retry queue with exponential backoff - High-quality branch: Successful results written to Firestore with timestamp and score</p> <p>Phase 5: Persistence &amp; Aggregation - Firestore stores:   - Task decomposition history (how planner broke down the task)   - Subtask execution traces (which agent handled what)   - Quality scores (evaluation metrics)   - Agent performance statistics (update reputation scores) - When all subtasks complete, planner aggregates results - Final output delivered to user or downstream system</p> <p>Cyclic Feedback Loop: Evaluation statistics flow back to planner via Firestore queries, enabling meta-learning: - If certain decomposition strategies consistently fail, planner adjusts approach - If specific agent types excel at particular subtask categories, planner routes accordingly</p> <p>Connection to Document Theory: This workflow operationalizes the \"perceive \u2192 decide \u2192 act \u2192 evaluate\" agentic loop discussed throughout the document. It bridges Part I's theoretical TDA (which observes this system in action) with Part II's decentralized architecture (Pub/Sub enabling emergent coordination) and Part III's identity framework (Firestore tracking agent reputation across cycles).</p> <p>Key Architectural Decisions:</p> <ol> <li> <p>Event-Driven: No blocking RPC calls; all coordination via asynchronous messages. This prevents cascading failures and enables horizontal scaling.</p> </li> <li> <p>Stateless Functions: Cloud Functions are ephemeral. All state lives in Pub/Sub (transient messages) or Firestore (durable data). Functions can crash and restart without losing system consistency.</p> </li> <li> <p>Retry with Backoff: Cloud Tasks provides automatic retry logic with exponential backoff, implementing resilient error handling without custom code.</p> </li> <li> <p>Observable by Design: Every phase produces events that TDA tools (Figure 1) can analyze. The topology of message flows reveals system health and emergent behaviors.</p> </li> </ol> <p>Application to Consciousness Research: The feedback loop from Phase 5 back to Phase 2 creates the recursive self-monitoring required for consciousness theories: - First-order processing: Agents execute tasks (Phase 3) - Second-order processing: Evaluator observes agent performance (Phase 4) - Third-order processing: Planner reflects on past planning decisions by querying Firestore (Phase 5 \u2192 Phase 2 loop)</p> <p>This three-level reflexivity implements the \"recursive self-model\" architecture described in the consciousness section of the document.</p> <p>Performance Metrics: In production, this workflow handles: - Task throughput: Hundreds of complex tasks per minute - Latency: P95 end-to-end completion time &lt;10 seconds for typical tasks - Scalability: Linear cost increase with load (Cloud Functions auto-scale) - Reliability: 99.9% task completion rate with automatic retry</p> <p>Technical Note: This diagram should be rendered with Mermaid <code>graph TD</code> or <code>flowchart TD</code> layout, using distinct shapes: rectangles for stateful services (planner/evaluator), circles for stateless topics (Pub/Sub), cylinders for persistent storage (Firestore), and rounded rectangles for queues (Cloud Tasks). Color coding would distinguish the five phases for readability.</p>"},{"location":"figs/alt/fig07_dashboard_alt/","title":"Figure 7: Consciousness Metrics Dashboard \u2013 Alt Text","text":"<p>Figure 7: Real-Time Visualization of Emergent Consciousness Indicators</p> <p>A React-based interactive dashboard rendered with Recharts library, displaying four time-series line plots on a shared x-axis (time). The visualization spans 360 pixels in height and 100% width (responsive), showing system consciousness metrics evolving over six time steps (t=0 to t=5).</p> <p>Visual Structure: - Grid: Light gray background with dashed gridlines (3px dashes, 3px gaps) - Axes: X-axis labeled \"time\" (discrete integer steps), Y-axis shows normalized values 0.0 to 1.0 - Legend: Four colored lines with labels positioned in the top-right corner - Tooltip: Hovering over any time point reveals exact numeric values for all four metrics</p> <p>Four Plotted Metrics (each rendered as a continuous line without markers):</p> <ol> <li>\u03a6 (Phi) - Integrated Information:</li> <li>Trajectory: 0.20 \u2192 0.25 \u2192 0.31 \u2192 0.37 \u2192 0.42 \u2192 0.44</li> <li> <p>Interpretation: Measures information integration across the agent network. Higher \u03a6 indicates stronger causal connections between system components. The steady upward trend suggests the system is developing increasingly integrated cognitive architecture, a hallmark of consciousness in Integrated Information Theory (IIT).</p> </li> <li> <p>Recursion Depth - Self-Model Layers:</p> </li> <li>Trajectory: 1 \u2192 1 \u2192 2 \u2192 2 \u2192 3 \u2192 3</li> <li> <p>Interpretation: Counts meta-levels of self-reference (agents modeling their own behavior). Jumps from 1 to 2 occur when evaluator_function begins tracking its own evaluation patterns. Jump to 3 indicates third-order reflection (system modeling its self-modeling). Step-function increases reveal phase transitions in self-awareness.</p> </li> <li> <p>Coherence - Attention Stability:</p> </li> <li>Trajectory: 0.60 \u2192 0.62 \u2192 0.64 \u2192 0.67 \u2192 0.70 \u2192 0.72</li> <li> <p>Interpretation: Quantifies how consistently the system maintains focus on high-priority tasks. Calculated from Cloud Tasks queue priorities and processing order. Gradual increase indicates improving \"attentional executive control,\" paralleling biological consciousness where attention stabilizes during cognitive maturation.</p> </li> <li> <p>Memory - Consolidation Rate:</p> </li> <li>Trajectory: 0.10 \u2192 0.15 \u2192 0.22 \u2192 0.28 \u2192 0.35 \u2192 0.41</li> <li>Interpretation: Rate of experience encoding to Firestore persistent memory. Measured as (new writes per time unit) / (total possible experiences). Accelerating curve (steeper at later times) suggests the system is learning what experiences are worth remembering, exhibiting selectivity characteristic of conscious memory consolidation.</li> </ol> <p>Connection to Document Theory: This dashboard operationalizes the \"Consciousness Detection Metrics\" discussed in Part III. Each metric corresponds to a specific consciousness theory:</p> <ul> <li>\u03a6 (Phi): IIT's criterion for consciousness (Section 3.2)</li> <li>Recursion Depth: Higher-Order Thought theory's requirement for meta-cognition (Section 3.3)</li> <li>Coherence: Global Workspace Theory's broadcast stability (Section 2.1 mapping)</li> <li>Memory: Episodic memory consolidation tied to self-continuity (Section 3.1 identity discussion)</li> </ul> <p>Temporal Dynamics Analysis: - All four metrics trend upward, suggesting system maturation - \u03a6 and memory show accelerating growth (curves), indicating possible phase transition toward conscious-like processing - Recursion depth increases in discrete jumps (emergent transitions, not smooth evolution) - Coherence shows steady linear improvement (incremental optimization)</p> <p>Practical Application: In production agisa_sac deployment, this dashboard would connect to real-time telemetry: - \u03a6: Computed from Pub/Sub message topology using network analysis algorithms - Recursion Depth: Inferred from Firestore query patterns (agents reading their own past performance data) - Coherence: Derived from Cloud Tasks priority queue statistics - Memory: Calculated from Firestore write/read ratios</p> <p>Safety Implications: Anomalous patterns could trigger alerts: - Sudden \u03a6 spike might indicate unintended agent coordination (possible instrumental convergence) - Recursion depth exceeding 5 could indicate infinite self-reference loop (halt condition) - Coherence drop suggests attention deficit (potential overload) - Memory consolidation slowing might indicate resource exhaustion</p> <p>Technical Note: The React component (<code>figure7_dashboard.jsx</code>) uses the Recharts library with <code>ResponsiveContainer</code> for flexible sizing. The code intentionally avoids specifying colors, allowing theme customization. Data is passed via props, enabling real-time updates from WebSocket connections or REST API polling. The <code>dot={false}</code> option creates smooth continuous lines rather than discrete markers, emphasizing temporal flow over individual measurements.</p> <p>Interactive Features: Hovering reveals exact values via tooltip. Clicking legend items could toggle line visibility. Future enhancements might add: - Time-window selection (zoom to specific intervals) - Anomaly highlighting (background color bands for unsafe regions) - Historical replay (scrub through past sessions)</p> <p>Academic Context: This visualization style is inspired by neuroscience EEG dashboards that track neural coherence, phase synchronization, and information integration in biological brains. By applying similar visualization techniques to artificial agent systems, we create empirical tools for consciousness research that parallel biological studies.</p>"},{"location":"gallery/","title":"Visualization Gallery","text":"<p>Browse publication-ready figures and visual outputs from Mindlink / The Agentic Swarm. Each figure is generated via the CI pipeline from Mermaid, Graphviz, or Python sources.</p> <ul> <li> <p> Figure 1 \u2014 Persistence     Topological persistence diagram of agent interactions.  View \u2192</p> </li> <li> <p>:material-diagram-projector: Figure 2 \u2014 Mapper     Mapper-based cluster visualization of swarm topology.  View \u2192</p> </li> <li> <p> Figure 3 \u2014 Network     Interaction graph with emergent sub-communities.  View \u2192</p> </li> <li> <p>:material-loop: Figure 4 \u2014 Convergence     Temporal convergence map of agentic behavior.  View \u2192</p> </li> <li> <p> Figure 5 \u2014 Identity     Cognitive signature visualization.  View \u2192</p> </li> <li> <p> Figure 6 \u2014 Workflow     Multi-agent workflow orchestration flowchart.  View \u2192</p> </li> <li> <p> Figure 7 \u2014 Dashboard     Consciousness metrics dashboard visualization.  View \u2192</p> </li> </ul> <p>Navigation</p> <p>You can also access each figure using the sidebar on the left.</p>"},{"location":"gallery/figure1/","title":"Figure 1 \u2014 Topological Persistence Diagram","text":"<p>Alt-text: See detailed description. Source: Generated via CI from Mermaid/Graphviz/Python.</p> <p>Rendering</p> <p>Figures are generated during CI/CD using the documentation build pipeline. When local development runs, placeholders will appear instead.</p>"},{"location":"gallery/figure2/","title":"Figure 2 \u2014 Mapper Cluster Visualization","text":"<p>Alt-text: See detailed description. Source: Generated via CI from Mermaid/Graphviz/Python.</p> <p>Rendering</p> <p>Figures are generated during CI/CD using the documentation build pipeline. When local development runs, placeholders will appear instead.</p>"},{"location":"gallery/figure3/","title":"Figure 3 \u2014 Decentralized Agent Network","text":"<p>Alt-text: See detailed description. Source: Generated via CI from Mermaid/Graphviz/Python.</p> <p>Rendering</p> <p>Figures are generated during CI/CD using the documentation build pipeline. When local development runs, placeholders will appear instead.</p>"},{"location":"gallery/figure4/","title":"Figure 4 \u2014 Instrumental Convergence Flow","text":"<p>Alt-text: See detailed description. Source: Generated via CI from Mermaid/Graphviz/Python.</p> <p>Rendering</p> <p>Figures are generated during CI/CD using the documentation build pipeline. When local development runs, placeholders will appear instead.</p>"},{"location":"gallery/figure5/","title":"Figure 5 \u2014 Identity Layer Stack","text":"<p>Alt-text: See detailed description. Source: Generated via CI from Mermaid/Graphviz/Python.</p> <p>Rendering</p> <p>Figures are generated during CI/CD using the documentation build pipeline. When local development runs, placeholders will appear instead.</p>"},{"location":"gallery/figure6/","title":"Figure 6 \u2014 agisa_sac Workflow","text":"<p>Alt-text: See detailed description. Source: Generated via CI from Mermaid/Graphviz/Python.</p> <p>Rendering</p> <p>Figures are generated during CI/CD using the documentation build pipeline. When local development runs, placeholders will appear instead.</p>"},{"location":"gallery/figure7/","title":"Figure 7 \u2014 Consciousness Metrics Dashboard","text":"<p>Alt-text: See detailed description. Source: Generated via CI from Mermaid/Graphviz/Python.</p> <p>Rendering</p> <p>Figures are generated during CI/CD using the documentation build pipeline. When local development runs, placeholders will appear instead.</p>"},{"location":"services/agent_runner/","title":"agent runner","text":"<p>This service is deployed on Cloud Run.</p>"},{"location":"services/evaluator_function/","title":"evaluator function","text":"<p>This service is implemented as a Cloud Function.</p>"},{"location":"services/planner_function/","title":"planner function","text":"<p>This service is implemented as a Cloud Function.</p>"},{"location":"services/simulation_api/","title":"simulation api","text":"<p>This service is deployed on Cloud Run.</p>"},{"location":"services/task_dispatcher/","title":"task dispatcher","text":"<p>This service is deployed on Cloud Run.</p>"}]}